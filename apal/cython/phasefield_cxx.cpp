/* Generated by Cython 0.29.7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "PARALLEL_KHACHATURYAN_INTEGRAL",
                null
            ],
            [
                "HAS_FFTW",
                null
            ]
        ],
        "depends": [
            "/home/gudrun/davidkl/.local/lib/python3.6/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/home/gudrun/davidkl/.local/lib/python3.6/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "phasefield_cxx/include/adaptive_timestep_logger.hpp",
            "phasefield_cxx/include/cahn_hilliard.hpp",
            "phasefield_cxx/include/chgl.hpp",
            "phasefield_cxx/include/conjugate_gradient.hpp",
            "phasefield_cxx/include/init_numpy.hpp",
            "phasefield_cxx/include/kernel_regressor.hpp",
            "phasefield_cxx/include/khachaturyan.hpp",
            "phasefield_cxx/include/mat4D.hpp",
            "phasefield_cxx/include/polynomial.hpp",
            "phasefield_cxx/include/polynomial_term.hpp",
            "phasefield_cxx/include/regression_kernels.hpp",
            "phasefield_cxx/include/sparse_matrix.hpp",
            "phasefield_cxx/include/two_phase_landau.hpp",
            "phasefield_cxx/src/mmsp_files.cpp",
            "phasefield_cxx/tests/test_multidirectional_khachaturyan.hpp"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-fopenmp"
        ],
        "include_dirs": [
            "/home/gudrun/davidkl/.local/lib/python3.6/site-packages/numpy/core/include",
            "phasefield_cxx/include",
            "phasefield_cxx/src",
            "phasefield_cxx/tests",
            "cpp/include",
            "/home/gudrun/davidkl/Documents/mmsp/include"
        ],
        "language": "c++",
        "libraries": [
            "gomp",
            "pthread",
            "z",
            "fftw3_threads",
            "fftw3"
        ],
        "name": "phasefield_cxx",
        "sources": [
            "cemc/phasefield/cython/phasefield_cxx.pyx",
            "phasefield_cxx/src/mat4D.cpp",
            "phasefield_cxx/src/khacaturyan.cpp",
            "phasefield_cxx/src/linalg.cpp",
            "phasefield_cxx/src/cahn_hilliard.cpp",
            "phasefield_cxx/src/polynomial_term.cpp",
            "phasefield_cxx/src/polynomial.cpp",
            "phasefield_cxx/src/regression_kernels.cpp",
            "phasefield_cxx/src/kernel_regressor.cpp",
            "phasefield_cxx/src/sparse_matrix.cpp",
            "phasefield_cxx/src/gaussian_white_noise.cpp",
            "phasefield_cxx/src/adaptive_timestep_logger.cpp",
            "cpp/src/additional_tools.cpp"
        ]
    },
    "module_name": "phasefield_cxx"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_7"
#define CYTHON_HEX_VERSION 0x001D07F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__phasefield_cxx
#define __PYX_HAVE_API__phasefield_cxx
/* Early includes */
#include "init_numpy.hpp"
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "regression_kernels.hpp"
#include <vector>
#include "kernel_regressor.hpp"
#include "mat4D.hpp"
#include "khachaturyan.hpp"
#include "polynomial_term.hpp"
#include "polynomial.hpp"
#include "two_phase_landau.hpp"
#include "cahn_hilliard.hpp"
#include <string>
#include "cahn_hilliard_phase_field.hpp"
#include "chgl.hpp"
#include "sparse_matrix.hpp"
#include "conjugate_gradient.hpp"
#include "adaptive_timestep_logger.hpp"
#include "mmsp_files.cpp"
#include "test_multidirectional_khachaturyan.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cemc/phasefield/cython/pyquadtratic_kernel.pyx",
  "stringsource",
  "cemc/phasefield/cython/pykernel_regressor.pyx",
  "cemc/phasefield/cython/pytwo_phase_landau.pyx",
  "cemc/phasefield/cython/pymat4D.pyx",
  "cemc/phasefield/cython/khachaturyan.pyx",
  "cemc/phasefield/cython/pycahn_hilliard.pyx",
  "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx",
  "cemc/phasefield/cython/pypolynomial_term.pyx",
  "cemc/phasefield/cython/pypolynomial.pyx",
  "cemc/phasefield/cython/pychgl.pyx",
  "cemc/phasefield/cython/pychgl_realspace.pyx",
  "cemc/phasefield/cython/pysparse_matrix.pyx",
  "cemc/phasefield/cython/pyconjugate_gradient.pyx",
  "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx",
  "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx",
  "__init__.pxd",
  "cemc/phasefield/cython/phasefield_cxx.pyx",
  "type.pxd",
};

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_14phasefield_cxx_PyRegressionKernel;
struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel;
struct __pyx_obj_14phasefield_cxx_PyGaussianKernel;
struct __pyx_obj_14phasefield_cxx_PyKernelRegressor;
struct __pyx_obj_14phasefield_cxx_PyMat4D;
struct __pyx_obj_14phasefield_cxx_PyKhachaturyan;
struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau;
struct __pyx_obj_14phasefield_cxx_PyCahnHilliard;
struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField;
struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm;
struct __pyx_obj_14phasefield_cxx_PyPolynomial;
struct __pyx_obj_14phasefield_cxx_PyCHGL;
struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace;
struct __pyx_obj_14phasefield_cxx_PySparseMatrix;
struct __pyx_obj_14phasefield_cxx_PyConjugateGradient;
struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":7
 * from cemc.phasefield.cython.gaussian_kernel cimport GaussianKernel
 * 
 * cdef class PyRegressionKernel:             # <<<<<<<<<<<<<<
 *     cdef RegressionKernel *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyRegressionKernel {
  PyObject_HEAD
  RegressionKernel *thisptr;
};


/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":16
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 * cdef class PyQuadraticKernel(PyRegressionKernel):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, double width):
 */
struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel {
  struct __pyx_obj_14phasefield_cxx_PyRegressionKernel __pyx_base;
};


/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":36
 *         self.thisptr.from_dict(dict_repr)
 * 
 * cdef class PyGaussianKernel(PyRegressionKernel):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, double std_dev):
 */
struct __pyx_obj_14phasefield_cxx_PyGaussianKernel {
  struct __pyx_obj_14phasefield_cxx_PyRegressionKernel __pyx_base;
};


/* "cemc/phasefield/cython/pykernel_regressor.pyx":8
 * import numpy as np
 * 
 * cdef class PyKernelRegressor:             # <<<<<<<<<<<<<<
 *     cdef KernelRegressor *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyKernelRegressor {
  PyObject_HEAD
  KernelRegressor *thisptr;
};


/* "cemc/phasefield/cython/pymat4D.pyx":4
 * 
 * from cemc.phasefield.cython.mat4D cimport Mat4D
 * cdef class PyMat4D:             # <<<<<<<<<<<<<<
 *     cdef Mat4D *matrix
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyMat4D {
  PyObject_HEAD
  Mat4D *matrix;
};


/* "cemc/phasefield/cython/khachaturyan.pyx":7
 * import numpy as np
 * 
 * cdef class PyKhachaturyan:             # <<<<<<<<<<<<<<
 *     cdef Khachaturyan *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyKhachaturyan {
  PyObject_HEAD
  Khachaturyan *thisptr;
};


/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":7
 * from cython.operator cimport dereference
 * 
 * cdef class PyTwoPhaseLandau:             # <<<<<<<<<<<<<<
 *     cdef TwoPhaseLandau *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau {
  PyObject_HEAD
  TwoPhaseLandau *thisptr;
};


/* "cemc/phasefield/cython/pycahn_hilliard.pyx":6
 * from libcpp.vector cimport vector
 * 
 * cdef class PyCahnHilliard:             # <<<<<<<<<<<<<<
 *     cdef CahnHilliard *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyCahnHilliard {
  PyObject_HEAD
  CahnHilliard *thisptr;
};


/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":13
 *     ctypedef int intParameter3 "3"
 * 
 * cdef class PyCahnHilliardPhaseField:             # <<<<<<<<<<<<<<
 *     cdef chpf.CahnHilliardPhaseField[intParameter1] *thisptr1D
 *     cdef chpf.CahnHilliardPhaseField[intParameter2] *thisptr2D
 */
struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField {
  PyObject_HEAD
  CahnHilliardPhaseField<1>  *thisptr1D;
  CahnHilliardPhaseField<2>  *thisptr2D;
  CahnHilliardPhaseField<3>  *thisptr3D;
  int dim;
};


/* "cemc/phasefield/cython/pypolynomial_term.pyx":7
 * 
 * 
 * cdef class PyPolynomialTerm:             # <<<<<<<<<<<<<<
 *     cdef PolynomialTerm *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm {
  PyObject_HEAD
  PolynomialTerm *thisptr;
};


/* "cemc/phasefield/cython/pypolynomial.pyx":6
 * from cython.operator cimport dereference
 * 
 * cdef class PyPolynomial:             # <<<<<<<<<<<<<<
 *     cdef Polynomial *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyPolynomial {
  PyObject_HEAD
  Polynomial *thisptr;
};


/* "cemc/phasefield/cython/pychgl.pyx":13
 *     ctypedef int intParameter3 "3"
 * 
 * cdef class PyCHGL:             # <<<<<<<<<<<<<<
 *     cdef CHGL[intParameter1] *thisptr1D
 *     cdef CHGL[intParameter2] *thisptr2D
 */
struct __pyx_obj_14phasefield_cxx_PyCHGL {
  PyObject_HEAD
  CHGL<1>  *thisptr1D;
  CHGL<2>  *thisptr2D;
  CHGL<3>  *thisptr3D;
  int dim;
};


/* "cemc/phasefield/cython/pychgl_realspace.pyx":13
 *     ctypedef int intParameter3 "3"
 * 
 * cdef class PyCHGLRealSpace:             # <<<<<<<<<<<<<<
 *     cdef CHGLRealSpace[intParameter1] *thisptr1D
 *     cdef CHGLRealSpace[intParameter2] *thisptr2D
 */
struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace {
  PyObject_HEAD
  CHGLRealSpace<1>  *thisptr1D;
  CHGLRealSpace<2>  *thisptr2D;
  CHGLRealSpace<3>  *thisptr3D;
  int dim;
};


/* "cemc/phasefield/cython/pysparse_matrix.pyx":4
 * from libcpp.vector cimport vector
 * 
 * cdef class PySparseMatrix:             # <<<<<<<<<<<<<<
 *     cdef SparseMatrix *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PySparseMatrix {
  PyObject_HEAD
  SparseMatrix *thisptr;
};


/* "cemc/phasefield/cython/pyconjugate_gradient.pyx":5
 * from cython.operator cimport dereference as deref
 * 
 * cdef class PyConjugateGradient:             # <<<<<<<<<<<<<<
 *     cdef ConjugateGradient *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyConjugateGradient {
  PyObject_HEAD
  ConjugateGradient *thisptr;
};


/* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":5
 * from cemc.phasefield.cython.adaptive_timestep_logger cimport AdaptiveTimeStepLogger, LogFileEntry
 * 
 * cdef class PyAdaptiveTimeStepLogger:             # <<<<<<<<<<<<<<
 *     cdef AdaptiveTimeStepLogger *thisptr
 * 
 */
struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger {
  PyObject_HEAD
  AdaptiveTimeStepLogger *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'cemc.phasefield.cython.regression_kernel' */

/* Module declarations from 'cemc.phasefield.cython.quadratic_kernel' */

/* Module declarations from 'cemc.phasefield.cython.gaussian_kernel' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cemc.phasefield.cython.kernel_regressor' */

/* Module declarations from 'cemc.phasefield.cython.mat4D' */

/* Module declarations from 'cemc.phasefield.cython.khachaturyan' */

/* Module declarations from 'cemc.phasefield.cython.polynomial' */

/* Module declarations from 'cemc.phasefield.cython.two_phase_landau' */

/* Module declarations from 'cemc.phasefield.cython.cahn_hilliard' */

/* Module declarations from 'cemc.phasefield.cython' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cemc.phasefield.cython.cahn_hilliard_phase_field' */

/* Module declarations from 'cemc.phasefield.cython.polynomial_term' */

/* Module declarations from 'cemc.phasefield.cython.chgl' */

/* Module declarations from 'cemc.phasefield.cython.CHGLRealSpace' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'cemc.phasefield.cython.sparse_matrix' */

/* Module declarations from 'cemc.phasefield.cython.conjugate_gradient' */

/* Module declarations from 'cemc.phasefield.cython.adaptive_timestep_logger' */

/* Module declarations from 'phasefield_cxx' */
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyRegressionKernel = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyQuadraticKernel = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyGaussianKernel = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyKernelRegressor = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyMat4D = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyKhachaturyan = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyTwoPhaseLandau = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyCahnHilliard = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyCahnHilliardPhaseField = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyPolynomialTerm = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyPolynomial = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyCHGL = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyCHGLRealSpace = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PySparseMatrix = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyConjugateGradient = 0;
static PyTypeObject *__pyx_ptype_14phasefield_cxx_PyAdaptiveTimeStepLogger = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "phasefield_cxx"
extern int __pyx_module_is_main_phasefield_cxx;
int __pyx_module_is_main_phasefield_cxx = 0;

/* Implementation of 'phasefield_cxx' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_gf[] = "gf";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_t2[] = "t2";
static const char __pyx_k_col[] = "col";
static const char __pyx_k_crd[] = "crd";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_rhs[] = "rhs";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_conc[] = "conc";
static const char __pyx_k_indx[] = "indx";
static const char __pyx_k_iter[] = "iter";
static const char __pyx_k_jump[] = "jump";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_xmax[] = "xmax";
static const char __pyx_k_xmin[] = "xmin";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_c_vec[] = "c_vec";
static const char __pyx_k_coeff[] = "coeff";
static const char __pyx_k_field[] = "field";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_PyCHGL[] = "PyCHGL";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_min_dt[] = "min_dt";
static const char __pyx_k_misfit[] = "misfit";
static const char __pyx_k_nsteps[] = "nsteps";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sp_mat[] = "sp_mat";
static const char __pyx_k_PyMat4D[] = "PyMat4D";
static const char __pyx_k_elastic[] = "elastic";
static const char __pyx_k_penalty[] = "penalty";
static const char __pyx_k_std_dev[] = "std_dev";
static const char __pyx_k_free_eng[] = "free_eng";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_isscalar[] = "isscalar";
static const char __pyx_k_min_step[] = "min_step";
static const char __pyx_k_new_term[] = "new_term";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_thisptr3[] = "thisptr3";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_increment[] = "increment";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_gl_damping[] = "gl_damping";
static const char __pyx_k_low_en_cut[] = "low_en_cut";
static const char __pyx_k_max_change[] = "max_change";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_inner_power[] = "inner_power";
static const char __pyx_k_range_scale[] = "range_scale";
static const char __pyx_k_PyPolynomial[] = "PyPolynomial";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_num_gl_fields[] = "num_gl_fields";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_PyCahnHilliard[] = "PyCahnHilliard";
static const char __pyx_k_PyKhachaturyan[] = "PyKhachaturyan";
static const char __pyx_k_PySparseMatrix[] = "PySparseMatrix";
static const char __pyx_k_gradient_coeff[] = "gradient_coeff";
static const char __pyx_k_phasefield_cxx[] = "phasefield_cxx";
static const char __pyx_k_PyCHGLRealSpace[] = "PyCHGLRealSpace";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyGaussianKernel[] = "PyGaussianKernel";
static const char __pyx_k_PyPolynomialTerm[] = "PyPolynomialTerm";
static const char __pyx_k_PyTwoPhaseLandau[] = "PyTwoPhaseLandau";
static const char __pyx_k_PyKernelRegressor[] = "PyKernelRegressor";
static const char __pyx_k_PyQuadraticKernel[] = "PyQuadraticKernel";
static const char __pyx_k_PyRegressionKernel[] = "PyRegressionKernel";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_PyConjugateGradient[] = "PyConjugateGradient";
static const char __pyx_k_increase_every_update[] = "increase_every_update";
static const char __pyx_k_pytest_B_tensor_element[] = "pytest_B_tensor_element";
static const char __pyx_k_pytest_contract_tensors[] = "pytest_contract_tensors";
static const char __pyx_k_PyAdaptiveTimeStepLogger[] = "PyAdaptiveTimeStepLogger";
static const char __pyx_k_PyCahnHilliardPhaseField[] = "PyCahnHilliardPhaseField";
static const char __pyx_k_dim_has_to_be_one_1_2_or_3[] = "dim has to be one 1, 2 or 3";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_Dimension_has_to_be_1_2_or_3[] = "Dimension has to be 1, 2, or 3";
static const char __pyx_k_pytest_functional_derivative[] = "pytest_functional_derivative";
static const char __pyx_k_The_direction_has_to_be_between[] = "The direction has to be between 0 and 3!";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Has_to_be_implemented_in_derived[] = "Has to be implemented in derived classes!";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_We_only_support_up_to_10_dimensi[] = "We only support up to 10 dimensional terms";
static const char __pyx_k_cemc_phasefield_cython_test_mult[] = "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self_thisptr_cannot_be_converted[] = "self.thisptr cannot be converted to a Python object for pickling";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_Dimension_has_to_be_1_2_or_3;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Has_to_be_implemented_in_derived;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PyAdaptiveTimeStepLogger;
static PyObject *__pyx_n_s_PyCHGL;
static PyObject *__pyx_n_s_PyCHGLRealSpace;
static PyObject *__pyx_n_s_PyCahnHilliard;
static PyObject *__pyx_n_s_PyCahnHilliardPhaseField;
static PyObject *__pyx_n_s_PyConjugateGradient;
static PyObject *__pyx_n_s_PyGaussianKernel;
static PyObject *__pyx_n_s_PyKernelRegressor;
static PyObject *__pyx_n_s_PyKhachaturyan;
static PyObject *__pyx_n_s_PyMat4D;
static PyObject *__pyx_n_s_PyPolynomial;
static PyObject *__pyx_n_s_PyPolynomialTerm;
static PyObject *__pyx_n_s_PyQuadraticKernel;
static PyObject *__pyx_n_s_PyRegressionKernel;
static PyObject *__pyx_n_s_PySparseMatrix;
static PyObject *__pyx_n_s_PyTwoPhaseLandau;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_The_direction_has_to_be_between;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s_We_only_support_up_to_10_dimensi;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_bounds;
static PyObject *__pyx_n_s_c_vec;
static PyObject *__pyx_kp_s_cemc_phasefield_cython_test_mult;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coeff;
static PyObject *__pyx_n_s_col;
static PyObject *__pyx_n_s_conc;
static PyObject *__pyx_n_s_crd;
static PyObject *__pyx_n_s_dim;
static PyObject *__pyx_kp_s_dim_has_to_be_one_1_2_or_3;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_elastic;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_free_eng;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gf;
static PyObject *__pyx_n_s_gl_damping;
static PyObject *__pyx_n_s_gradient_coeff;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_increase_every_update;
static PyObject *__pyx_n_s_increment;
static PyObject *__pyx_n_s_indx;
static PyObject *__pyx_n_s_inner_power;
static PyObject *__pyx_n_s_isscalar;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_jump;
static PyObject *__pyx_n_s_low_en_cut;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_change;
static PyObject *__pyx_n_s_min_dt;
static PyObject *__pyx_n_s_min_step;
static PyObject *__pyx_n_s_misfit;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_new_term;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nsteps;
static PyObject *__pyx_n_s_num_gl_fields;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_penalty;
static PyObject *__pyx_n_s_phasefield_cxx;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_pytest_B_tensor_element;
static PyObject *__pyx_n_s_pytest_contract_tensors;
static PyObject *__pyx_n_s_pytest_functional_derivative;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_range_scale;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_rhs;
static PyObject *__pyx_n_s_row;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_kp_s_self_thisptr_cannot_be_converted;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sp_mat;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_std_dev;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thisptr3;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xmax;
static PyObject *__pyx_n_s_xmin;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_evaluate(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_2deriv(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_17PyQuadraticKernel___cinit__(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, double __pyx_v_width); /* proto */
static void __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_4evaluate(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_6deriv(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_8to_dict(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_10from_dict(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_dict_repr); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_16PyGaussianKernel___cinit__(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, double __pyx_v_std_dev); /* proto */
static void __pyx_pf_14phasefield_cxx_16PyGaussianKernel_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_4evaluate(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_6deriv(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_8to_dict(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_10from_dict(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_dict_repr); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_17PyKernelRegressor___cinit__(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_xmax); /* proto */
static void __pyx_pf_14phasefield_cxx_17PyKernelRegressor_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_4evaluate(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_6deriv(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_8set_kernel(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_kernel); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_10evaluate_kernel(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_12set_coeff(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_coeff); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_14to_dict(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_16from_dict(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_dict_repr); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_7PyMat4D___cinit__(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self); /* proto */
static void __pyx_pf_14phasefield_cxx_7PyMat4D_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_4from_numpy(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self, PyObject *__pyx_v_npy); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_6to_numpy(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_14PyKhachaturyan___cinit__(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, int __pyx_v_dim, PyObject *__pyx_v_elastic, PyObject *__pyx_v_misfit); /* proto */
static void __pyx_pf_14phasefield_cxx_14PyKhachaturyan_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_4green_function(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_direction); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_6wave_vector(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_indx, PyObject *__pyx_v_N); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_8zeroth_order_integral(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_ft_shp); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_10effective_stress(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau___cinit__(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_2evaluate(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_4set_kernel_regressor(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_pyregr); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_6set_polynomial(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_pypoly); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_8set_discontinuity(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_jump); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_10partial_deriv_conc(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_12partial_deriv_shape(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape, PyObject *__pyx_v_direction); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_14PyCahnHilliard___cinit__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_coeff, CYTHON_UNUSED PyObject *__pyx_v_penalty, CYTHON_UNUSED PyObject *__pyx_v_bounds, CYTHON_UNUSED PyObject *__pyx_v_range_scale); /* proto */
static int __pyx_pf_14phasefield_cxx_14PyCahnHilliard_2__init__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_coeff, PyObject *__pyx_v_penalty, PyObject *__pyx_v_bounds, PyObject *__pyx_v_range_scale); /* proto */
static void __pyx_pf_14phasefield_cxx_14PyCahnHilliard_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_6evaluate(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_8deriv(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_10regularization(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_12regularization_deriv(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_14set_bounds(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_16set_penalty(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_penalty); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_18set_range_scale(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_scale); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField___cinit__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_free_eng, PyObject *__pyx_v_M, PyObject *__pyx_v_dt, PyObject *__pyx_v_alpha); /* proto */
static int __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_2__init__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_free_eng, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_alpha); /* proto */
static void __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_6run(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_8random_initialization(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_10from_file(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_npy_array); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_16set_adaptive(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_min_step, PyObject *__pyx_v_max_change); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_18build2D(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_16PyPolynomialTerm___cinit__(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_inner_power); /* proto */
static void __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_4evaluate(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_6deriv(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_crd); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_12PyPolynomial___cinit__(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_dim); /* proto */
static void __pyx_pf_14phasefield_cxx_12PyPolynomial_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_4add_term(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_coeff, struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_new_term); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_6evaluate(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_8deriv(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_crd); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_6PyCHGL___cinit__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, PyObject *__pyx_v_num_gl_fields, PyObject *__pyx_v_M, PyObject *__pyx_v_alpha, PyObject *__pyx_v_dt, PyObject *__pyx_v_gl_damping, PyObject *__pyx_v_gradient_coeff); /* proto */
static int __pyx_pf_14phasefield_cxx_6PyCHGL_2__init__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_alpha, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_gl_damping, CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff); /* proto */
static void __pyx_pf_14phasefield_cxx_6PyCHGL_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_6run(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_8from_file(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_10random_initialization(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_arrays); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_16set_free_energy(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_term); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_18print_polynomial(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_20save_free_energy_map(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_22use_HeLiuTang_stabilizer(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_coeff); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_24use_adaptive_stepping(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_min_dt, PyObject *__pyx_v_increase_every_update, PyObject *__pyx_v_low_en_cut); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_26set_filter(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_width); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace___cinit__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, PyObject *__pyx_v_num_gl_fields, PyObject *__pyx_v_M, PyObject *__pyx_v_alpha, PyObject *__pyx_v_dt, PyObject *__pyx_v_gl_damping, PyObject *__pyx_v_gradient_coeff); /* proto */
static int __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_2__init__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_alpha, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_gl_damping, CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff); /* proto */
static void __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_6run(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_8from_file(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_10random_initialization(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_arrays); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_16set_free_energy(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_term); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_18print_polynomial(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_20save_free_energy_map(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_22use_HeLiuTang_stabilizer(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_coeff); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_24use_adaptive_stepping(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_min_dt, PyObject *__pyx_v_increase_every_update, PyObject *__pyx_v_low_en_cut); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_26set_filter(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_width); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_28build2D(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_30set_cook_noise(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_amplitude); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_32save_noise_realization(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_field); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_34add_strain_model(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_obj, PyObject *__pyx_v_field); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_14PySparseMatrix___cinit__(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static void __pyx_pf_14phasefield_cxx_14PySparseMatrix_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_4insert(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_row, PyObject *__pyx_v_col, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_6dot(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_vec); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_8clear(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_10save(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_12is_symmetric(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_14to_csr(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_19PyConjugateGradient___cinit__(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, PyObject *__pyx_v_tol); /* proto */
static void __pyx_pf_14phasefield_cxx_19PyConjugateGradient_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_4solve(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_sp_mat, PyObject *__pyx_v_rhs, PyObject *__pyx_v_res); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger___cinit__(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static void __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_4log(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, PyObject *__pyx_v_iter, PyObject *__pyx_v_time); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_6getLast(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_pytest_functional_derivative(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_elastic, PyObject *__pyx_v_misfit, PyObject *__pyx_v_field); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_2pytest_contract_tensors(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t1, PyObject *__pyx_v_t2); /* proto */
static PyObject *__pyx_pf_14phasefield_cxx_4pytest_B_tensor_element(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir, PyObject *__pyx_v_gf, PyObject *__pyx_v_t1, PyObject *__pyx_v_t2); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_14phasefield_cxx_PyRegressionKernel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyQuadraticKernel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyGaussianKernel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyKernelRegressor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyMat4D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyKhachaturyan(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyTwoPhaseLandau(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyCahnHilliard(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyCahnHilliardPhaseField(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyPolynomialTerm(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyPolynomial(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyCHGL(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyCHGLRealSpace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PySparseMatrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyConjugateGradient(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14phasefield_cxx_PyAdaptiveTimeStepLogger(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
/* Late includes */

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":10
 *     cdef RegressionKernel *thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_1evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_1evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_18PyRegressionKernel_evaluate(((struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_evaluate(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":11
 * 
 *     def evaluate(self, x):
 *         raise NotImplementedError("Has to be implemented in derived classes!")             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 11, __pyx_L1_error)

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":10
 *     cdef RegressionKernel *thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyRegressionKernel.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":13
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_3deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_3deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_18PyRegressionKernel_2deriv(((struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_2deriv(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":14
 * 
 *     def deriv(self, x):
 *         raise NotImplementedError("Has to be implemented in derived classes!")             # <<<<<<<<<<<<<<
 * 
 * cdef class PyQuadraticKernel(PyRegressionKernel):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 14, __pyx_L1_error)

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":13
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Has to be implemented in derived classes!")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyRegressionKernel.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_18PyRegressionKernel_4__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyRegressionKernel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_18PyRegressionKernel_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_18PyRegressionKernel_6__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_18PyRegressionKernel_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyRegressionKernel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":18
 * cdef class PyQuadraticKernel(PyRegressionKernel):
 * 
 *     def __cinit__(self, double width):             # <<<<<<<<<<<<<<
 *         self.thisptr = new QuadraticKernel(width)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_17PyQuadraticKernel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_17PyQuadraticKernel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_width;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 18, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_width = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_width == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 18, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 18, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel___cinit__(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self), __pyx_v_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_17PyQuadraticKernel___cinit__(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, double __pyx_v_width) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":19
 * 
 *     def __cinit__(self, double width):
 *         self.thisptr = new QuadraticKernel(width)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.thisptr = new QuadraticKernel(__pyx_v_width);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":18
 * cdef class PyQuadraticKernel(PyRegressionKernel):
 * 
 *     def __cinit__(self, double width):             # <<<<<<<<<<<<<<
 *         self.thisptr = new QuadraticKernel(width)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":21
 *         self.thisptr = new QuadraticKernel(width)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_17PyQuadraticKernel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_17PyQuadraticKernel_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":22
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  delete __pyx_v_self->__pyx_base.thisptr;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":21
 *         self.thisptr = new QuadraticKernel(width)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":24
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_4evaluate(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_4evaluate(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":25
 * 
 *     def evaluate(self, x):
 *         return self.thisptr.evaluate(x)             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.thisptr->evaluate(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":24
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":27
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_6deriv(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_6deriv(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":28
 * 
 *     def deriv(self, x):
 *         return self.thisptr.deriv(x)             # <<<<<<<<<<<<<<
 * 
 *     def to_dict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.thisptr->deriv(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":27
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":30
 *         return self.thisptr.deriv(x)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_9to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_9to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_8to_dict(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_8to_dict(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_dict", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":31
 * 
 *     def to_dict(self):
 *         return self.thisptr.to_dict()             # <<<<<<<<<<<<<<
 * 
 *     def from_dict(self, dict_repr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base.thisptr->to_dict(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":30
 *         return self.thisptr.deriv(x)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":33
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_11from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_11from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_10from_dict(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self), ((PyObject *)__pyx_v_dict_repr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_10from_dict(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":34
 * 
 *     def from_dict(self, dict_repr):
 *         self.thisptr.from_dict(dict_repr)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyGaussianKernel(PyRegressionKernel):
 */
  try {
    __pyx_v_self->__pyx_base.thisptr->from_dict(__pyx_v_dict_repr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 34, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":33
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_12__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyQuadraticKernel_14__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyQuadraticKernel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyQuadraticKernel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":38
 * cdef class PyGaussianKernel(PyRegressionKernel):
 * 
 *     def __cinit__(self, double std_dev):             # <<<<<<<<<<<<<<
 *         self.thisptr = new GaussianKernel(std_dev)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_16PyGaussianKernel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_16PyGaussianKernel_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_std_dev;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_std_dev,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_std_dev)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 38, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_std_dev = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_std_dev == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 38, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel___cinit__(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self), __pyx_v_std_dev);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_16PyGaussianKernel___cinit__(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, double __pyx_v_std_dev) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":39
 * 
 *     def __cinit__(self, double std_dev):
 *         self.thisptr = new GaussianKernel(std_dev)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->__pyx_base.thisptr = new GaussianKernel(__pyx_v_std_dev);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":38
 * cdef class PyGaussianKernel(PyRegressionKernel):
 * 
 *     def __cinit__(self, double std_dev):             # <<<<<<<<<<<<<<
 *         self.thisptr = new GaussianKernel(std_dev)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":41
 *         self.thisptr = new GaussianKernel(std_dev)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_16PyGaussianKernel_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_16PyGaussianKernel_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_16PyGaussianKernel_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_16PyGaussianKernel_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":42
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  delete __pyx_v_self->__pyx_base.thisptr;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":41
 *         self.thisptr = new GaussianKernel(std_dev)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":44
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_4evaluate(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_4evaluate(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":45
 * 
 *     def evaluate(self, x):
 *         return self.thisptr.evaluate(x)             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.thisptr->evaluate(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":44
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":47
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_6deriv(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_6deriv(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":48
 * 
 *     def deriv(self, x):
 *         return self.thisptr.deriv(x)             # <<<<<<<<<<<<<<
 * 
 *     def to_dict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.thisptr->deriv(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":47
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":50
 *         return self.thisptr.deriv(x)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_9to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_9to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_8to_dict(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_8to_dict(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_dict", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":51
 * 
 *     def to_dict(self):
 *         return self.thisptr.to_dict()             # <<<<<<<<<<<<<<
 * 
 *     def from_dict(self, dict_repr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->__pyx_base.thisptr->to_dict(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":50
 *         return self.thisptr.deriv(x)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":53
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_11from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_11from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_10from_dict(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self), ((PyObject *)__pyx_v_dict_repr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_10from_dict(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":54
 * 
 *     def from_dict(self, dict_repr):
 *         self.thisptr.from_dict(dict_repr)             # <<<<<<<<<<<<<<
 */
  try {
    __pyx_v_self->__pyx_base.thisptr->from_dict(__pyx_v_dict_repr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 54, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":53
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_12__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyGaussianKernel_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyGaussianKernel_14__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyGaussianKernel_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyGaussianKernel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyGaussianKernel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":11
 *     cdef KernelRegressor *thisptr
 * 
 *     def __cinit__(self, double xmin, double xmax):             # <<<<<<<<<<<<<<
 *         self.thisptr = new KernelRegressor(xmin, xmax)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_17PyKernelRegressor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_17PyKernelRegressor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_xmin;
  double __pyx_v_xmax;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xmin,&__pyx_n_s_xmax,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xmin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xmax)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(2, 11, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 11, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_xmin = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_xmin == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 11, __pyx_L3_error)
    __pyx_v_xmax = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_xmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 11, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 11, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor___cinit__(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), __pyx_v_xmin, __pyx_v_xmax);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_17PyKernelRegressor___cinit__(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, double __pyx_v_xmin, double __pyx_v_xmax) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":12
 * 
 *     def __cinit__(self, double xmin, double xmax):
 *         self.thisptr = new KernelRegressor(xmin, xmax)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new KernelRegressor(__pyx_v_xmin, __pyx_v_xmax);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":11
 *     cdef KernelRegressor *thisptr
 * 
 *     def __cinit__(self, double xmin, double xmax):             # <<<<<<<<<<<<<<
 *         self.thisptr = new KernelRegressor(xmin, xmax)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":14
 *         self.thisptr = new KernelRegressor(xmin, xmax)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_17PyKernelRegressor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_17PyKernelRegressor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_17PyKernelRegressor_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_17PyKernelRegressor_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":15
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":14
 *         self.thisptr = new KernelRegressor(xmin, xmax)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":17
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_4evaluate(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_4evaluate(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_x) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":18
 * 
 *     def evaluate(self, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.evaluate(x)
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_x) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_x);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":19
 *     def evaluate(self, x):
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate(x)             # <<<<<<<<<<<<<<
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 19, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":18
 * 
 *     def evaluate(self, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.evaluate(x)
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]
 */
  }

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":20
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate(x)
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 20, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":17
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":22
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.deriv(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_6deriv(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_6deriv(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_x) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":23
 * 
 *     def deriv(self, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.deriv(x)
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_x) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_x);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":24
 *     def deriv(self, x):
 *         if np.isscalar(x):
 *             return self.thisptr.deriv(x)             # <<<<<<<<<<<<<<
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 24, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->deriv(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":23
 * 
 *     def deriv(self, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.deriv(x)
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]
 */
  }

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":25
 *         if np.isscalar(x):
 *             return self.thisptr.deriv(x)
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]             # <<<<<<<<<<<<<<
 * 
 *     def set_kernel(self, PyRegressionKernel kernel):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 25, __pyx_L1_error)
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->deriv(__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":22
 *         return [self.thisptr.evaluate(x[i]) for i in range(len(x))]
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.deriv(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":27
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]
 * 
 *     def set_kernel(self, PyRegressionKernel kernel):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_kernel(dereference(kernel.thisptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_9set_kernel(PyObject *__pyx_v_self, PyObject *__pyx_v_kernel); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_9set_kernel(PyObject *__pyx_v_self, PyObject *__pyx_v_kernel) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_kernel (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kernel), __pyx_ptype_14phasefield_cxx_PyRegressionKernel, 1, "kernel", 0))) __PYX_ERR(2, 27, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_8set_kernel(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *)__pyx_v_kernel));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_8set_kernel(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyRegressionKernel *__pyx_v_kernel) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_kernel", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":28
 * 
 *     def set_kernel(self, PyRegressionKernel kernel):
 *         self.thisptr.set_kernel(dereference(kernel.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def evaluate_kernel(self, i, x):
 */
  __pyx_v_self->thisptr->set_kernel((*__pyx_v_kernel->thisptr));

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":27
 *         return [self.thisptr.deriv(x[i]) for i in range(len(x))]
 * 
 *     def set_kernel(self, PyRegressionKernel kernel):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_kernel(dereference(kernel.thisptr))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":30
 *         self.thisptr.set_kernel(dereference(kernel.thisptr))
 * 
 *     def evaluate_kernel(self, i, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate_kernel(i, x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_11evaluate_kernel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_11evaluate_kernel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate_kernel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_x,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_kernel", 1, 2, 2, 1); __PYX_ERR(2, 30, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_kernel") < 0)) __PYX_ERR(2, 30, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = values[0];
    __pyx_v_x = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_kernel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 30, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.evaluate_kernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_10evaluate_kernel(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), __pyx_v_i, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_10evaluate_kernel(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_x) {
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  unsigned int __pyx_t_5;
  double __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("evaluate_kernel", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":31
 * 
 *     def evaluate_kernel(self, i, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.evaluate_kernel(i, x)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_x) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_x);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":32
 *     def evaluate_kernel(self, i, x):
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate_kernel(i, x)             # <<<<<<<<<<<<<<
 * 
 *         return [self.thisptr.evaluate_kernel(i, x[j]) for j in range(len(x))]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 32, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 32, __pyx_L1_error)
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate_kernel(__pyx_t_5, __pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":31
 * 
 *     def evaluate_kernel(self, i, x):
 *         if np.isscalar(x):             # <<<<<<<<<<<<<<
 *             return self.thisptr.evaluate_kernel(i, x)
 * 
 */
  }

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":34
 *             return self.thisptr.evaluate_kernel(i, x)
 * 
 *         return [self.thisptr.evaluate_kernel(i, x[j]) for j in range(len(x))]             # <<<<<<<<<<<<<<
 * 
 *     def set_coeff(self, coeff):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(2, 34, __pyx_L1_error)
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_j = __pyx_t_9;
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 34, __pyx_L1_error)
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate_kernel(__pyx_t_5, __pyx_t_6)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":30
 *         self.thisptr.set_kernel(dereference(kernel.thisptr))
 * 
 *     def evaluate_kernel(self, i, x):             # <<<<<<<<<<<<<<
 *         if np.isscalar(x):
 *             return self.thisptr.evaluate_kernel(i, x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.evaluate_kernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":36
 *         return [self.thisptr.evaluate_kernel(i, x[j]) for j in range(len(x))]
 * 
 *     def set_coeff(self, coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[double] vec_coeff
 *         for i in range(len(coeff)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_13set_coeff(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_13set_coeff(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_coeff (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_12set_coeff(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((PyObject *)__pyx_v_coeff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_12set_coeff(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_coeff) {
  std::vector<double>  __pyx_v_vec_coeff;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("set_coeff", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":38
 *     def set_coeff(self, coeff):
 *         cdef vector[double] vec_coeff
 *         for i in range(len(coeff)):             # <<<<<<<<<<<<<<
 *             vec_coeff.push_back(coeff[i])
 *         self.thisptr.set_coeff(vec_coeff)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_coeff); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pykernel_regressor.pyx":39
 *         cdef vector[double] vec_coeff
 *         for i in range(len(coeff)):
 *             vec_coeff.push_back(coeff[i])             # <<<<<<<<<<<<<<
 *         self.thisptr.set_coeff(vec_coeff)
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_coeff, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_vec_coeff.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(2, 39, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":40
 *         for i in range(len(coeff)):
 *             vec_coeff.push_back(coeff[i])
 *         self.thisptr.set_coeff(vec_coeff)             # <<<<<<<<<<<<<<
 * 
 *     def to_dict(self):
 */
  __pyx_v_self->thisptr->set_coeff(__pyx_v_vec_coeff);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":36
 *         return [self.thisptr.evaluate_kernel(i, x[j]) for j in range(len(x))]
 * 
 *     def set_coeff(self, coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[double] vec_coeff
 *         for i in range(len(coeff)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.set_coeff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":42
 *         self.thisptr.set_coeff(vec_coeff)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_15to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_15to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_14to_dict(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_14to_dict(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_dict", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":43
 * 
 *     def to_dict(self):
 *         return self.thisptr.to_dict()             # <<<<<<<<<<<<<<
 * 
 *     def from_dict(self, dict_repr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->thisptr->to_dict(); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":42
 *         self.thisptr.set_coeff(vec_coeff)
 * 
 *     def to_dict(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.to_dict()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pykernel_regressor.pyx":45
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_17from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_17from_dict(PyObject *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_16from_dict(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((PyObject *)__pyx_v_dict_repr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_16from_dict(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, PyObject *__pyx_v_dict_repr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":46
 * 
 *     def from_dict(self, dict_repr):
 *         self.thisptr.from_dict(dict_repr)             # <<<<<<<<<<<<<<
 */
  try {
    __pyx_v_self->thisptr->from_dict(__pyx_v_dict_repr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 46, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":45
 *         return self.thisptr.to_dict()
 * 
 *     def from_dict(self, dict_repr):             # <<<<<<<<<<<<<<
 *         self.thisptr.from_dict(dict_repr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_18__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_17PyKernelRegressor_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_17PyKernelRegressor_20__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_17PyKernelRegressor_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKernelRegressor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pymat4D.pyx":7
 *     cdef Mat4D *matrix
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.matrix = new Mat4D()
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_7PyMat4D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_7PyMat4D_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14phasefield_cxx_7PyMat4D___cinit__(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_7PyMat4D___cinit__(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pymat4D.pyx":8
 * 
 *     def __cinit__(self):
 *         self.matrix = new Mat4D()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->matrix = new Mat4D();

  /* "cemc/phasefield/cython/pymat4D.pyx":7
 *     cdef Mat4D *matrix
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.matrix = new Mat4D()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pymat4D.pyx":10
 *         self.matrix = new Mat4D()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.matrix
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_7PyMat4D_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_7PyMat4D_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_7PyMat4D_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_7PyMat4D_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pymat4D.pyx":11
 * 
 *     def __dealloc__(self):
 *         del self.matrix             # <<<<<<<<<<<<<<
 * 
 *     def from_numpy(self, npy):
 */
  delete __pyx_v_self->matrix;

  /* "cemc/phasefield/cython/pymat4D.pyx":10
 *         self.matrix = new Mat4D()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.matrix
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pymat4D.pyx":13
 *         del self.matrix
 * 
 *     def from_numpy(self, npy):             # <<<<<<<<<<<<<<
 *         self.matrix.from_numpy(npy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_5from_numpy(PyObject *__pyx_v_self, PyObject *__pyx_v_npy); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_5from_numpy(PyObject *__pyx_v_self, PyObject *__pyx_v_npy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_numpy (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_7PyMat4D_4from_numpy(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self), ((PyObject *)__pyx_v_npy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_4from_numpy(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self, PyObject *__pyx_v_npy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_numpy", 0);

  /* "cemc/phasefield/cython/pymat4D.pyx":14
 * 
 *     def from_numpy(self, npy):
 *         self.matrix.from_numpy(npy)             # <<<<<<<<<<<<<<
 * 
 *     def to_numpy(self):
 */
  try {
    __pyx_v_self->matrix->from_numpy(__pyx_v_npy);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 14, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pymat4D.pyx":13
 *         del self.matrix
 * 
 *     def from_numpy(self, npy):             # <<<<<<<<<<<<<<
 *         self.matrix.from_numpy(npy)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyMat4D.from_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pymat4D.pyx":16
 *         self.matrix.from_numpy(npy)
 * 
 *     def to_numpy(self):             # <<<<<<<<<<<<<<
 *         return self.matrix.to_numpy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_7to_numpy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_7to_numpy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_numpy (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_7PyMat4D_6to_numpy(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_6to_numpy(struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_numpy", 0);

  /* "cemc/phasefield/cython/pymat4D.pyx":17
 * 
 *     def to_numpy(self):
 *         return self.matrix.to_numpy()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->matrix->to_numpy(); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pymat4D.pyx":16
 *         self.matrix.from_numpy(npy)
 * 
 *     def to_numpy(self):             # <<<<<<<<<<<<<<
 *         return self.matrix.to_numpy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyMat4D.to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_7PyMat4D_8__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyMat4D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_7PyMat4D_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_7PyMat4D_10__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyMat4D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_7PyMat4D_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyMat4D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyMat4D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/khachaturyan.pyx":10
 *     cdef Khachaturyan *thisptr
 * 
 *     def __cinit__(self, int dim, elastic, misfit):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Khachaturyan(dim, elastic, misfit)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_14PyKhachaturyan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_14PyKhachaturyan_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_dim;
  PyObject *__pyx_v_elastic = 0;
  PyObject *__pyx_v_misfit = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_elastic,&__pyx_n_s_misfit,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_elastic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(5, 10, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_misfit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(5, 10, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 10, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dim = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 10, __pyx_L3_error)
    __pyx_v_elastic = values[1];
    __pyx_v_misfit = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 10, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan___cinit__(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self), __pyx_v_dim, __pyx_v_elastic, __pyx_v_misfit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_14PyKhachaturyan___cinit__(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, int __pyx_v_dim, PyObject *__pyx_v_elastic, PyObject *__pyx_v_misfit) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":11
 * 
 *     def __cinit__(self, int dim, elastic, misfit):
 *         self.thisptr = new Khachaturyan(dim, elastic, misfit)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr = new Khachaturyan(__pyx_v_dim, __pyx_v_elastic, __pyx_v_misfit);

  /* "cemc/phasefield/cython/khachaturyan.pyx":10
 *     cdef Khachaturyan *thisptr
 * 
 *     def __cinit__(self, int dim, elastic, misfit):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Khachaturyan(dim, elastic, misfit)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/khachaturyan.pyx":14
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_14PyKhachaturyan_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_14PyKhachaturyan_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_14PyKhachaturyan_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_14PyKhachaturyan_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":15
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def green_function(self, direction):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/khachaturyan.pyx":14
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/khachaturyan.pyx":17
 *         del self.thisptr
 * 
 *     def green_function(self, direction):             # <<<<<<<<<<<<<<
 *         return self.thisptr.green_function(direction)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_5green_function(PyObject *__pyx_v_self, PyObject *__pyx_v_direction); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_5green_function(PyObject *__pyx_v_self, PyObject *__pyx_v_direction) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("green_function (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_4green_function(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self), ((PyObject *)__pyx_v_direction));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_4green_function(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_direction) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("green_function", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":18
 * 
 *     def green_function(self, direction):
 *         return self.thisptr.green_function(direction)             # <<<<<<<<<<<<<<
 * 
 *     def wave_vector(self, indx, N):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->thisptr->green_function(__pyx_v_direction); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":17
 *         del self.thisptr
 * 
 *     def green_function(self, direction):             # <<<<<<<<<<<<<<
 *         return self.thisptr.green_function(direction)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.green_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/khachaturyan.pyx":20
 *         return self.thisptr.green_function(direction)
 * 
 *     def wave_vector(self, indx, N):             # <<<<<<<<<<<<<<
 *         cdef unsigned int indx_c[3]
 *         cdef double dir_c[3]
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_7wave_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_7wave_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indx = 0;
  PyObject *__pyx_v_N = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wave_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indx,&__pyx_n_s_N,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("wave_vector", 1, 2, 2, 1); __PYX_ERR(5, 20, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "wave_vector") < 0)) __PYX_ERR(5, 20, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_indx = values[0];
    __pyx_v_N = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wave_vector", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 20, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.wave_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_6wave_vector(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self), __pyx_v_indx, __pyx_v_N);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_6wave_vector(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_indx, PyObject *__pyx_v_N) {
  unsigned int __pyx_v_indx_c[3];
  double __pyx_v_dir_c[3];
  long __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("wave_vector", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":24
 *         cdef double dir_c[3]
 * 
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             indx_c[i] = indx[i]
 * 
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cemc/phasefield/cython/khachaturyan.pyx":25
 * 
 *         for i in range(3):
 *             indx_c[i] = indx[i]             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.wave_vector(indx_c, dir_c, N)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_indx, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(5, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_indx_c[__pyx_v_i]) = __pyx_t_3;
  }

  /* "cemc/phasefield/cython/khachaturyan.pyx":27
 *             indx_c[i] = indx[i]
 * 
 *         self.thisptr.wave_vector(indx_c, dir_c, N)             # <<<<<<<<<<<<<<
 *         out = np.zeros(3)
 *         for i in range(3):
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 27, __pyx_L1_error)
  __pyx_v_self->thisptr->wave_vector(__pyx_v_indx_c, __pyx_v_dir_c, __pyx_t_4);

  /* "cemc/phasefield/cython/khachaturyan.pyx":28
 * 
 *         self.thisptr.wave_vector(indx_c, dir_c, N)
 *         out = np.zeros(3)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             out[i] = dir_c[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_int_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_int_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_out = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":29
 *         self.thisptr.wave_vector(indx_c, dir_c, N)
 *         out = np.zeros(3)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             out[i] = dir_c[i]
 *         return out
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cemc/phasefield/cython/khachaturyan.pyx":30
 *         out = np.zeros(3)
 *         for i in range(3):
 *             out[i] = dir_c[i]             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_dir_c[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_out, __pyx_v_i, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(5, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "cemc/phasefield/cython/khachaturyan.pyx":31
 *         for i in range(3):
 *             out[i] = dir_c[i]
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def zeroth_order_integral(self, ft_shp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":20
 *         return self.thisptr.green_function(direction)
 * 
 *     def wave_vector(self, indx, N):             # <<<<<<<<<<<<<<
 *         cdef unsigned int indx_c[3]
 *         cdef double dir_c[3]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.wave_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/khachaturyan.pyx":33
 *         return out
 * 
 *     def zeroth_order_integral(self, ft_shp):             # <<<<<<<<<<<<<<
 *         return self.thisptr.zeroth_order_integral(ft_shp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_9zeroth_order_integral(PyObject *__pyx_v_self, PyObject *__pyx_v_ft_shp); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_9zeroth_order_integral(PyObject *__pyx_v_self, PyObject *__pyx_v_ft_shp) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zeroth_order_integral (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_8zeroth_order_integral(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self), ((PyObject *)__pyx_v_ft_shp));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_8zeroth_order_integral(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, PyObject *__pyx_v_ft_shp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("zeroth_order_integral", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":34
 * 
 *     def zeroth_order_integral(self, ft_shp):
 *         return self.thisptr.zeroth_order_integral(ft_shp)             # <<<<<<<<<<<<<<
 * 
 *     def effective_stress(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->zeroth_order_integral(__pyx_v_ft_shp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":33
 *         return out
 * 
 *     def zeroth_order_integral(self, ft_shp):             # <<<<<<<<<<<<<<
 *         return self.thisptr.zeroth_order_integral(ft_shp)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.zeroth_order_integral", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/khachaturyan.pyx":36
 *         return self.thisptr.zeroth_order_integral(ft_shp)
 * 
 *     def effective_stress(self):             # <<<<<<<<<<<<<<
 *         cdef double e_stress[3][3]
 *         self.thisptr.effective_stress(e_stress)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_11effective_stress(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_11effective_stress(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("effective_stress (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_10effective_stress(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_10effective_stress(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self) {
  double __pyx_v_e_stress[3][3];
  PyObject *__pyx_v_stress = NULL;
  long __pyx_v_i;
  long __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("effective_stress", 0);

  /* "cemc/phasefield/cython/khachaturyan.pyx":38
 *     def effective_stress(self):
 *         cdef double e_stress[3][3]
 *         self.thisptr.effective_stress(e_stress)             # <<<<<<<<<<<<<<
 * 
 *         stress = np.zeros((3, 3))
 */
  __pyx_v_self->thisptr->effective_stress(__pyx_v_e_stress);

  /* "cemc/phasefield/cython/khachaturyan.pyx":40
 *         self.thisptr.effective_stress(e_stress)
 * 
 *         stress = np.zeros((3, 3))             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple__12) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple__12);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stress = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":41
 * 
 *         stress = np.zeros((3, 3))
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 stress[i, j] = e_stress[i][j]
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "cemc/phasefield/cython/khachaturyan.pyx":42
 *         stress = np.zeros((3, 3))
 *         for i in range(3):
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 stress[i, j] = e_stress[i][j]
 *         return stress
 */
    for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
      __pyx_v_j = __pyx_t_5;

      /* "cemc/phasefield/cython/khachaturyan.pyx":43
 *         for i in range(3):
 *             for j in range(3):
 *                 stress[i, j] = e_stress[i][j]             # <<<<<<<<<<<<<<
 *         return stress
 * 
 */
      __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_e_stress[__pyx_v_i])[__pyx_v_j])); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_2 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_stress, __pyx_t_6, __pyx_t_1) < 0)) __PYX_ERR(5, 43, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  }

  /* "cemc/phasefield/cython/khachaturyan.pyx":44
 *             for j in range(3):
 *                 stress[i, j] = e_stress[i][j]
 *         return stress             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_stress);
  __pyx_r = __pyx_v_stress;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":36
 *         return self.thisptr.zeroth_order_integral(ft_shp)
 * 
 *     def effective_stress(self):             # <<<<<<<<<<<<<<
 *         cdef double e_stress[3][3]
 *         self.thisptr.effective_stress(e_stress)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.effective_stress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_stress);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_12__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyKhachaturyan_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyKhachaturyan_14__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyKhachaturyan_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyKhachaturyan.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":10
 *     cdef TwoPhaseLandau *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new TwoPhaseLandau()
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau___cinit__(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau___cinit__(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":11
 * 
 *     def __cinit__(self):
 *         self.thisptr = new TwoPhaseLandau()             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, conc, shape):
 */
  __pyx_v_self->thisptr = new TwoPhaseLandau();

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":10
 *     cdef TwoPhaseLandau *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new TwoPhaseLandau()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":13
 *         self.thisptr = new TwoPhaseLandau()
 * 
 *     def evaluate(self, conc, shape):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for s in shape:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_shape = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conc,&__pyx_n_s_shape,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate", 1, 2, 2, 1); __PYX_ERR(3, 13, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate") < 0)) __PYX_ERR(3, 13, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conc = values[0];
    __pyx_v_shape = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 13, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_2evaluate(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), __pyx_v_conc, __pyx_v_shape);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_2evaluate(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape) {
  std::vector<double>  __pyx_v_shp_vec;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":15
 *     def evaluate(self, conc, shape):
 *         cdef vector[double] shp_vec
 *         for s in shape:             # <<<<<<<<<<<<<<
 *             shp_vec.push_back(s)
 *         return self.thisptr.evaluate(conc, shp_vec)
 */
  if (likely(PyList_CheckExact(__pyx_v_shape)) || PyTuple_CheckExact(__pyx_v_shape)) {
    __pyx_t_1 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 15, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 15, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 15, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 15, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 15, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 15, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":16
 *         cdef vector[double] shp_vec
 *         for s in shape:
 *             shp_vec.push_back(s)             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(conc, shp_vec)
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 16, __pyx_L1_error)
    try {
      __pyx_v_shp_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 16, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":15
 *     def evaluate(self, conc, shape):
 *         cdef vector[double] shp_vec
 *         for s in shape:             # <<<<<<<<<<<<<<
 *             shp_vec.push_back(s)
 *         return self.thisptr.evaluate(conc, shp_vec)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":17
 *         for s in shape:
 *             shp_vec.push_back(s)
 *         return self.thisptr.evaluate(conc, shp_vec)             # <<<<<<<<<<<<<<
 * 
 *     def set_kernel_regressor(self, PyKernelRegressor pyregr):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_conc); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_t_5, __pyx_v_shp_vec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":13
 *         self.thisptr = new TwoPhaseLandau()
 * 
 *     def evaluate(self, conc, shape):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for s in shape:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":19
 *         return self.thisptr.evaluate(conc, shp_vec)
 * 
 *     def set_kernel_regressor(self, PyKernelRegressor pyregr):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_kernel_regressor(dereference(pyregr.thisptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_5set_kernel_regressor(PyObject *__pyx_v_self, PyObject *__pyx_v_pyregr); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_5set_kernel_regressor(PyObject *__pyx_v_self, PyObject *__pyx_v_pyregr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_kernel_regressor (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pyregr), __pyx_ptype_14phasefield_cxx_PyKernelRegressor, 1, "pyregr", 0))) __PYX_ERR(3, 19, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_4set_kernel_regressor(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), ((struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *)__pyx_v_pyregr));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_4set_kernel_regressor(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyKernelRegressor *__pyx_v_pyregr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_kernel_regressor", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":20
 * 
 *     def set_kernel_regressor(self, PyKernelRegressor pyregr):
 *         self.thisptr.set_kernel_regressor(dereference(pyregr.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def set_polynomial(self, PyPolynomial pypoly):
 */
  __pyx_v_self->thisptr->set_kernel_regressor((*__pyx_v_pyregr->thisptr));

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":19
 *         return self.thisptr.evaluate(conc, shp_vec)
 * 
 *     def set_kernel_regressor(self, PyKernelRegressor pyregr):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_kernel_regressor(dereference(pyregr.thisptr))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":22
 *         self.thisptr.set_kernel_regressor(dereference(pyregr.thisptr))
 * 
 *     def set_polynomial(self, PyPolynomial pypoly):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_polynomial(dereference(pypoly.thisptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_7set_polynomial(PyObject *__pyx_v_self, PyObject *__pyx_v_pypoly); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_7set_polynomial(PyObject *__pyx_v_self, PyObject *__pyx_v_pypoly) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_polynomial (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pypoly), __pyx_ptype_14phasefield_cxx_PyPolynomial, 1, "pypoly", 0))) __PYX_ERR(3, 22, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_6set_polynomial(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), ((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_pypoly));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_6set_polynomial(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_pypoly) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_polynomial", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":23
 * 
 *     def set_polynomial(self, PyPolynomial pypoly):
 *         self.thisptr.set_polynomial(dereference(pypoly.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def set_discontinuity(self, conc, jump):
 */
  __pyx_v_self->thisptr->set_polynomial((*__pyx_v_pypoly->thisptr));

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":22
 *         self.thisptr.set_kernel_regressor(dereference(pyregr.thisptr))
 * 
 *     def set_polynomial(self, PyPolynomial pypoly):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_polynomial(dereference(pypoly.thisptr))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":25
 *         self.thisptr.set_polynomial(dereference(pypoly.thisptr))
 * 
 *     def set_discontinuity(self, conc, jump):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_discontinuity(conc, jump)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_9set_discontinuity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_9set_discontinuity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_jump = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_discontinuity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conc,&__pyx_n_s_jump,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_jump)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_discontinuity", 1, 2, 2, 1); __PYX_ERR(3, 25, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_discontinuity") < 0)) __PYX_ERR(3, 25, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conc = values[0];
    __pyx_v_jump = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_discontinuity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 25, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.set_discontinuity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_8set_discontinuity(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), __pyx_v_conc, __pyx_v_jump);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_8set_discontinuity(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_jump) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("set_discontinuity", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":26
 * 
 *     def set_discontinuity(self, conc, jump):
 *         self.thisptr.set_discontinuity(conc, jump)             # <<<<<<<<<<<<<<
 * 
 *     def partial_deriv_conc(self, conc, shape):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_conc); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 26, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_jump); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 26, __pyx_L1_error)
  __pyx_v_self->thisptr->set_discontinuity(__pyx_t_1, __pyx_t_2);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":25
 *         self.thisptr.set_polynomial(dereference(pypoly.thisptr))
 * 
 *     def set_discontinuity(self, conc, jump):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_discontinuity(conc, jump)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.set_discontinuity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":28
 *         self.thisptr.set_discontinuity(conc, jump)
 * 
 *     def partial_deriv_conc(self, conc, shape):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_11partial_deriv_conc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_11partial_deriv_conc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_shape = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partial_deriv_conc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conc,&__pyx_n_s_shape,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_deriv_conc", 1, 2, 2, 1); __PYX_ERR(3, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "partial_deriv_conc") < 0)) __PYX_ERR(3, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_conc = values[0];
    __pyx_v_shape = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partial_deriv_conc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.partial_deriv_conc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_10partial_deriv_conc(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), __pyx_v_conc, __pyx_v_shape);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_10partial_deriv_conc(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape) {
  std::vector<double>  __pyx_v_shp_vec;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("partial_deriv_conc", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":30
 *     def partial_deriv_conc(self, conc, shape):
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):             # <<<<<<<<<<<<<<
 *             shp_vec.push_back(shape[i])
 *         return self.thisptr.partial_deriv_conc(conc, shp_vec)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(3, 30, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":31
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 *             shp_vec.push_back(shape[i])             # <<<<<<<<<<<<<<
 *         return self.thisptr.partial_deriv_conc(conc, shp_vec)
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_shape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 31, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_shp_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 31, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":32
 *         for i in range(len(shape)):
 *             shp_vec.push_back(shape[i])
 *         return self.thisptr.partial_deriv_conc(conc, shp_vec)             # <<<<<<<<<<<<<<
 * 
 *     def partial_deriv_shape(self, conc, shape, direction):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_conc); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 32, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->thisptr->partial_deriv_conc(__pyx_t_5, __pyx_v_shp_vec)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":28
 *         self.thisptr.set_discontinuity(conc, jump)
 * 
 *     def partial_deriv_conc(self, conc, shape):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.partial_deriv_conc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pytwo_phase_landau.pyx":34
 *         return self.thisptr.partial_deriv_conc(conc, shp_vec)
 * 
 *     def partial_deriv_shape(self, conc, shape, direction):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_13partial_deriv_shape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_13partial_deriv_shape(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_shape = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("partial_deriv_shape (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_conc,&__pyx_n_s_shape,&__pyx_n_s_direction,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_deriv_shape", 1, 3, 3, 1); __PYX_ERR(3, 34, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("partial_deriv_shape", 1, 3, 3, 2); __PYX_ERR(3, 34, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "partial_deriv_shape") < 0)) __PYX_ERR(3, 34, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_conc = values[0];
    __pyx_v_shape = values[1];
    __pyx_v_direction = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("partial_deriv_shape", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 34, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.partial_deriv_shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_12partial_deriv_shape(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), __pyx_v_conc, __pyx_v_shape, __pyx_v_direction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_12partial_deriv_shape(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, PyObject *__pyx_v_conc, PyObject *__pyx_v_shape, PyObject *__pyx_v_direction) {
  std::vector<double>  __pyx_v_shp_vec;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  unsigned int __pyx_t_8;
  __Pyx_RefNannySetupContext("partial_deriv_shape", 0);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":36
 *     def partial_deriv_shape(self, conc, shape, direction):
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):             # <<<<<<<<<<<<<<
 *             shp_vec.push_back(shape[i])
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(3, 36, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":37
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 *             shp_vec.push_back(shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if direction < 0 or direction >= 3:
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_shape, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_shp_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 37, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":39
 *             shp_vec.push_back(shape[i])
 * 
 *         if direction < 0 or direction >= 3:             # <<<<<<<<<<<<<<
 *             raise ValueError("The direction has to be between 0 and 3!")
 *         return self.thisptr.partial_deriv_shape(conc, shp_vec, direction)
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_direction, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 39, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(3, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_direction, __pyx_int_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 39, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(3, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":40
 * 
 *         if direction < 0 or direction >= 3:
 *             raise ValueError("The direction has to be between 0 and 3!")             # <<<<<<<<<<<<<<
 *         return self.thisptr.partial_deriv_shape(conc, shp_vec, direction)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(3, 40, __pyx_L1_error)

    /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":39
 *             shp_vec.push_back(shape[i])
 * 
 *         if direction < 0 or direction >= 3:             # <<<<<<<<<<<<<<
 *             raise ValueError("The direction has to be between 0 and 3!")
 *         return self.thisptr.partial_deriv_shape(conc, shp_vec, direction)
 */
  }

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":41
 *         if direction < 0 or direction >= 3:
 *             raise ValueError("The direction has to be between 0 and 3!")
 *         return self.thisptr.partial_deriv_shape(conc, shp_vec, direction)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_conc); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 41, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_direction); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(3, 41, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->thisptr->partial_deriv_shape(__pyx_t_5, __pyx_v_shp_vec, __pyx_t_8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":34
 *         return self.thisptr.partial_deriv_conc(conc, shp_vec)
 * 
 *     def partial_deriv_shape(self, conc, shape, direction):             # <<<<<<<<<<<<<<
 *         cdef vector[double] shp_vec
 *         for i in range(len(shape)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.partial_deriv_shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_14__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_16__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyTwoPhaseLandau_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyTwoPhaseLandau.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":9
 *     cdef CahnHilliard *thisptr
 * 
 *     def __cinit__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):             # <<<<<<<<<<<<<<
 *         cdef vector[double] c_vec
 *         for c in coeff:
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_14PyCahnHilliard_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_14PyCahnHilliard_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeff = 0;
  CYTHON_UNUSED PyObject *__pyx_v_penalty = 0;
  CYTHON_UNUSED PyObject *__pyx_v_bounds = 0;
  CYTHON_UNUSED PyObject *__pyx_v_range_scale = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_penalty,&__pyx_n_s_bounds,&__pyx_n_s_range_scale,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_100_0);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_float_0_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_penalty);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range_scale);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(6, 9, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coeff = values[0];
    __pyx_v_penalty = values[1];
    __pyx_v_bounds = values[2];
    __pyx_v_range_scale = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 9, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard___cinit__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), __pyx_v_coeff, __pyx_v_penalty, __pyx_v_bounds, __pyx_v_range_scale);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_14PyCahnHilliard___cinit__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_coeff, CYTHON_UNUSED PyObject *__pyx_v_penalty, CYTHON_UNUSED PyObject *__pyx_v_bounds, CYTHON_UNUSED PyObject *__pyx_v_range_scale) {
  std::vector<double>  __pyx_v_c_vec;
  PyObject *__pyx_v_c = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":11
 *     def __cinit__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):
 *         cdef vector[double] c_vec
 *         for c in coeff:             # <<<<<<<<<<<<<<
 *             c_vec.push_back(c)
 *         self.thisptr = new CahnHilliard(c_vec)
 */
  if (likely(PyList_CheckExact(__pyx_v_coeff)) || PyTuple_CheckExact(__pyx_v_coeff)) {
    __pyx_t_1 = __pyx_v_coeff; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_coeff); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 11, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 11, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 11, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 11, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 11, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(6, 11, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cemc/phasefield/cython/pycahn_hilliard.pyx":12
 *         cdef vector[double] c_vec
 *         for c in coeff:
 *             c_vec.push_back(c)             # <<<<<<<<<<<<<<
 *         self.thisptr = new CahnHilliard(c_vec)
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_c); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 12, __pyx_L1_error)
    try {
      __pyx_v_c_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 12, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pycahn_hilliard.pyx":11
 *     def __cinit__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):
 *         cdef vector[double] c_vec
 *         for c in coeff:             # <<<<<<<<<<<<<<
 *             c_vec.push_back(c)
 *         self.thisptr = new CahnHilliard(c_vec)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":13
 *         for c in coeff:
 *             c_vec.push_back(c)
 *         self.thisptr = new CahnHilliard(c_vec)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):
 */
  __pyx_v_self->thisptr = new CahnHilliard(__pyx_v_c_vec);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":9
 *     cdef CahnHilliard *thisptr
 * 
 *     def __cinit__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):             # <<<<<<<<<<<<<<
 *         cdef vector[double] c_vec
 *         for c in coeff:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":15
 *         self.thisptr = new CahnHilliard(c_vec)
 * 
 *     def __init__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_penalty(penalty)
 *         self.thisptr.set_range_scale(range_scale)
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_14PyCahnHilliard_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_14PyCahnHilliard_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_coeff = 0;
  PyObject *__pyx_v_penalty = 0;
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_range_scale = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_penalty,&__pyx_n_s_bounds,&__pyx_n_s_range_scale,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)__pyx_float_100_0);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_float_0_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_penalty);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range_scale);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 15, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coeff = values[0];
    __pyx_v_penalty = values[1];
    __pyx_v_bounds = values[2];
    __pyx_v_range_scale = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 15, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_2__init__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), __pyx_v_coeff, __pyx_v_penalty, __pyx_v_bounds, __pyx_v_range_scale);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_14PyCahnHilliard_2__init__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_coeff, PyObject *__pyx_v_penalty, PyObject *__pyx_v_bounds, PyObject *__pyx_v_range_scale) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":16
 * 
 *     def __init__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):
 *         self.thisptr.set_penalty(penalty)             # <<<<<<<<<<<<<<
 *         self.thisptr.set_range_scale(range_scale)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_penalty); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 16, __pyx_L1_error)
  __pyx_v_self->thisptr->set_penalty(__pyx_t_1);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":17
 *     def __init__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):
 *         self.thisptr.set_penalty(penalty)
 *         self.thisptr.set_range_scale(range_scale)             # <<<<<<<<<<<<<<
 * 
 *         if bounds is not None:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_range_scale); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 17, __pyx_L1_error)
  __pyx_v_self->thisptr->set_range_scale(__pyx_t_1);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":19
 *         self.thisptr.set_range_scale(range_scale)
 * 
 *         if bounds is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr.set_bounds(bounds[0], bounds[1])
 * 
 */
  __pyx_t_2 = (__pyx_v_bounds != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cemc/phasefield/cython/pycahn_hilliard.pyx":20
 * 
 *         if bounds is not None:
 *             self.thisptr.set_bounds(bounds[0], bounds[1])             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->thisptr->set_bounds(__pyx_t_1, __pyx_t_5);

    /* "cemc/phasefield/cython/pycahn_hilliard.pyx":19
 *         self.thisptr.set_range_scale(range_scale)
 * 
 *         if bounds is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr.set_bounds(bounds[0], bounds[1])
 * 
 */
  }

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":15
 *         self.thisptr = new CahnHilliard(c_vec)
 * 
 *     def __init__(self, coeff, penalty=100.0, bounds=None, range_scale=0.1):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_penalty(penalty)
 *         self.thisptr.set_range_scale(range_scale)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":22
 *             self.thisptr.set_bounds(bounds[0], bounds[1])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_14PyCahnHilliard_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_14PyCahnHilliard_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_14PyCahnHilliard_4__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_14PyCahnHilliard_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":23
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":22
 *             self.thisptr.set_bounds(bounds[0], bounds[1])
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":25
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_6evaluate(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_6evaluate(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":26
 * 
 *     def evaluate(self, x):
 *         return self.thisptr.evaluate(x)             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 26, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":25
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":28
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_9deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_9deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_8deriv(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_8deriv(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":29
 * 
 *     def deriv(self, x):
 *         return self.thisptr.deriv(x)             # <<<<<<<<<<<<<<
 * 
 *     def regularization(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 29, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->deriv(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":28
 *         return self.thisptr.evaluate(x)
 * 
 *     def deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":31
 *         return self.thisptr.deriv(x)
 * 
 *     def regularization(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.regularization(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_11regularization(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_11regularization(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("regularization (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_10regularization(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_10regularization(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("regularization", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":32
 * 
 *     def regularization(self, x):
 *         return self.thisptr.regularization(x)             # <<<<<<<<<<<<<<
 * 
 *     def regularization_deriv(self, x):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 32, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->regularization(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":31
 *         return self.thisptr.deriv(x)
 * 
 *     def regularization(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.regularization(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.regularization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":34
 *         return self.thisptr.regularization(x)
 * 
 *     def regularization_deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.regularization_deriv(x)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_13regularization_deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_13regularization_deriv(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("regularization_deriv (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_12regularization_deriv(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_12regularization_deriv(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("regularization_deriv", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":35
 * 
 *     def regularization_deriv(self, x):
 *         return self.thisptr.regularization_deriv(x)             # <<<<<<<<<<<<<<
 * 
 *     def set_bounds(self, lower, upper):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 35, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->regularization_deriv(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":34
 *         return self.thisptr.regularization(x)
 * 
 *     def regularization_deriv(self, x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.regularization_deriv(x)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.regularization_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":37
 *         return self.thisptr.regularization_deriv(x)
 * 
 *     def set_bounds(self, lower, upper):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_bounds(lower, upper)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_15set_bounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_15set_bounds(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_bounds (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_bounds", 1, 2, 2, 1); __PYX_ERR(6, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_bounds") < 0)) __PYX_ERR(6, 37, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lower = values[0];
    __pyx_v_upper = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_bounds", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.set_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_14set_bounds(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_14set_bounds(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("set_bounds", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":38
 * 
 *     def set_bounds(self, lower, upper):
 *         self.thisptr.set_bounds(lower, upper)             # <<<<<<<<<<<<<<
 * 
 *     def set_penalty(self, penalty):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_lower); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 38, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_upper); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 38, __pyx_L1_error)
  __pyx_v_self->thisptr->set_bounds(__pyx_t_1, __pyx_t_2);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":37
 *         return self.thisptr.regularization_deriv(x)
 * 
 *     def set_bounds(self, lower, upper):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_bounds(lower, upper)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.set_bounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":40
 *         self.thisptr.set_bounds(lower, upper)
 * 
 *     def set_penalty(self, penalty):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_penalty(penalty)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_17set_penalty(PyObject *__pyx_v_self, PyObject *__pyx_v_penalty); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_17set_penalty(PyObject *__pyx_v_self, PyObject *__pyx_v_penalty) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_penalty (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_16set_penalty(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_penalty));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_16set_penalty(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_penalty) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_penalty", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":41
 * 
 *     def set_penalty(self, penalty):
 *         self.thisptr.set_penalty(penalty)             # <<<<<<<<<<<<<<
 * 
 *     def set_range_scale(self, scale):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_penalty); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 41, __pyx_L1_error)
  __pyx_v_self->thisptr->set_penalty(__pyx_t_1);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":40
 *         self.thisptr.set_bounds(lower, upper)
 * 
 *     def set_penalty(self, penalty):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_penalty(penalty)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.set_penalty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard.pyx":43
 *         self.thisptr.set_penalty(penalty)
 * 
 *     def set_range_scale(self, scale):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_range_scale(scale)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_19set_range_scale(PyObject *__pyx_v_self, PyObject *__pyx_v_scale); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_19set_range_scale(PyObject *__pyx_v_self, PyObject *__pyx_v_scale) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_range_scale (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_18set_range_scale(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_18set_range_scale(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, PyObject *__pyx_v_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_range_scale", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":44
 * 
 *     def set_range_scale(self, scale):
 *         self.thisptr.set_range_scale(scale)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_scale); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 44, __pyx_L1_error)
  __pyx_v_self->thisptr->set_range_scale(__pyx_t_1);

  /* "cemc/phasefield/cython/pycahn_hilliard.pyx":43
 *         self.thisptr.set_penalty(penalty)
 * 
 *     def set_range_scale(self, scale):             # <<<<<<<<<<<<<<
 *         self.thisptr.set_range_scale(scale)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.set_range_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_20__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PyCahnHilliard_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PyCahnHilliard_22__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PyCahnHilliard_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliard.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, PyCahnHilliard free_eng, M, dt, alpha):             # <<<<<<<<<<<<<<
 *         if dim == 1:
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_v_L = 0;
  PyObject *__pyx_v_prefix = 0;
  struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_free_eng = 0;
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_v_alpha = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_free_eng,&__pyx_n_s_M,&__pyx_n_s_dt,&__pyx_n_s_alpha,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 1); __PYX_ERR(7, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 2); __PYX_ERR(7, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_free_eng)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 3); __PYX_ERR(7, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 4); __PYX_ERR(7, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 5); __PYX_ERR(7, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, 6); __PYX_ERR(7, 19, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(7, 19, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_free_eng = ((struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *)values[3]);
    __pyx_v_M = values[4];
    __pyx_v_dt = values[5];
    __pyx_v_alpha = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_free_eng), __pyx_ptype_14phasefield_cxx_PyCahnHilliard, 1, "free_eng", 0))) __PYX_ERR(7, 19, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField___cinit__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_free_eng, __pyx_v_M, __pyx_v_dt, __pyx_v_alpha);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField___cinit__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, struct __pyx_obj_14phasefield_cxx_PyCahnHilliard *__pyx_v_free_eng, PyObject *__pyx_v_M, PyObject *__pyx_v_dt, PyObject *__pyx_v_alpha) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":20
 * 
 *     def __cinit__(self, dim, L, prefix, PyCahnHilliard free_eng, M, dt, alpha):
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 2:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":21
 *     def __cinit__(self, dim, L, prefix, PyCahnHilliard free_eng, M, dt, alpha):
 *         if dim == 1:
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)             # <<<<<<<<<<<<<<
 *         elif dim == 2:
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 21, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 21, __pyx_L1_error)
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 21, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 21, __pyx_L1_error)
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 21, __pyx_L1_error)
    __pyx_v_self->thisptr1D = ((CahnHilliardPhaseField<1>  *)new CahnHilliardPhaseField<1> (__pyx_t_3, __pyx_t_4, ((CahnHilliard *)__pyx_v_free_eng->thisptr), __pyx_t_5, __pyx_t_6, __pyx_t_7));

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":20
 * 
 *     def __cinit__(self, dim, L, prefix, PyCahnHilliard free_eng, M, dt, alpha):
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 2:
 */
    goto __pyx_L3;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":22
 *         if dim == 1:
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":23
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 2:
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)             # <<<<<<<<<<<<<<
 *         elif dim == 3:
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 23, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 23, __pyx_L1_error)
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 23, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 23, __pyx_L1_error)
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 23, __pyx_L1_error)
    __pyx_v_self->thisptr2D = ((CahnHilliardPhaseField<2>  *)new CahnHilliardPhaseField<2> (__pyx_t_3, __pyx_t_4, ((CahnHilliard *)__pyx_v_free_eng->thisptr), __pyx_t_7, __pyx_t_6, __pyx_t_5));

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":22
 *         if dim == 1:
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 3:
 */
    goto __pyx_L3;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":24
 *         elif dim == 2:
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":25
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 3:
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("dim has to be one 1, 2 or 3")
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 25, __pyx_L1_error)
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 25, __pyx_L1_error)
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 25, __pyx_L1_error)
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 25, __pyx_L1_error)
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 25, __pyx_L1_error)
    __pyx_v_self->thisptr3D = ((CahnHilliardPhaseField<3>  *)new CahnHilliardPhaseField<3> (__pyx_t_3, __pyx_t_4, ((CahnHilliard *)__pyx_v_free_eng->thisptr), __pyx_t_5, __pyx_t_6, __pyx_t_7));

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":24
 *         elif dim == 2:
 *             self.thisptr2D = new chpf.CahnHilliardPhaseField[intParameter2](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":27
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         else:
 *             raise ValueError("dim has to be one 1, 2 or 3")             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, dim, L, prefix, free_eng, M, dt, alpha):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(7, 27, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, PyCahnHilliard free_eng, M, dt, alpha):             # <<<<<<<<<<<<<<
 *         if dim == 1:
 *             self.thisptr1D = new chpf.CahnHilliardPhaseField[intParameter1](L, prefix, free_eng.thisptr, M, dt, alpha)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":29
 *             raise ValueError("dim has to be one 1, 2 or 3")
 * 
 *     def __init__(self, dim, L, prefix, free_eng, M, dt, alpha):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  CYTHON_UNUSED PyObject *__pyx_v_L = 0;
  CYTHON_UNUSED PyObject *__pyx_v_prefix = 0;
  CYTHON_UNUSED PyObject *__pyx_v_free_eng = 0;
  CYTHON_UNUSED PyObject *__pyx_v_M = 0;
  CYTHON_UNUSED PyObject *__pyx_v_dt = 0;
  CYTHON_UNUSED PyObject *__pyx_v_alpha = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_free_eng,&__pyx_n_s_M,&__pyx_n_s_dt,&__pyx_n_s_alpha,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 1); __PYX_ERR(7, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 2); __PYX_ERR(7, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_free_eng)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 3); __PYX_ERR(7, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 4); __PYX_ERR(7, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 5); __PYX_ERR(7, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 6); __PYX_ERR(7, 29, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(7, 29, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_free_eng = values[3];
    __pyx_v_M = values[4];
    __pyx_v_dt = values[5];
    __pyx_v_alpha = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 29, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_2__init__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_free_eng, __pyx_v_M, __pyx_v_dt, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_2__init__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_free_eng, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_alpha) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":30
 * 
 *     def __init__(self, dim, L, prefix, free_eng, M, dt, alpha):
 *         self.dim = dim             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dim); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 30, __pyx_L1_error)
  __pyx_v_self->dim = __pyx_t_1;

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":29
 *             raise ValueError("dim has to be one 1, 2 or 3")
 * 
 *     def __init__(self, dim, L, prefix, free_eng, M, dt, alpha):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":32
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_4__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":33
 * 
 *     def __dealloc__(self):
 *         del self.thisptr1D             # <<<<<<<<<<<<<<
 *         del self.thisptr2D
 *         del self.thisptr3D
 */
  delete __pyx_v_self->thisptr1D;

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":34
 *     def __dealloc__(self):
 *         del self.thisptr1D
 *         del self.thisptr2D             # <<<<<<<<<<<<<<
 *         del self.thisptr3D
 * 
 */
  delete __pyx_v_self->thisptr2D;

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":35
 *         del self.thisptr1D
 *         del self.thisptr2D
 *         del self.thisptr3D             # <<<<<<<<<<<<<<
 * 
 *     def run(self, nsteps, increment, start=0):
 */
  delete __pyx_v_self->thisptr3D;

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":32
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":37
 *         del self.thisptr3D
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nsteps = 0;
  PyObject *__pyx_v_increment = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nsteps,&__pyx_n_s_increment,&__pyx_n_s_start,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsteps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_increment)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, 1); __PYX_ERR(7, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) __PYX_ERR(7, 37, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nsteps = values[0];
    __pyx_v_increment = values[1];
    __pyx_v_start = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_6run(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), __pyx_v_nsteps, __pyx_v_increment, __pyx_v_start);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_6run(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("run", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":38
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":39
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 39, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 39, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 39, __pyx_L1_error)
    __pyx_v_self->thisptr1D->run(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":38
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":41
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.run(start, nsteps, increment)
 */
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 41, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 41, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 41, __pyx_L1_error)
    __pyx_v_self->thisptr2D->run(__pyx_t_2, __pyx_t_1, __pyx_t_3);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":40
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":43
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 *             self.thisptr3D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 * 
 *     def random_initialization(self, lower, upper):
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 43, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(7, 43, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 43, __pyx_L1_error)
    __pyx_v_self->thisptr3D->run(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":42
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":37
 *         del self.thisptr3D
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":45
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.random_initialization(lower, upper)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_9random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_9random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_initialization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, 1); __PYX_ERR(7, 45, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_initialization") < 0)) __PYX_ERR(7, 45, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lower = values[0];
    __pyx_v_upper = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 45, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_8random_initialization(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_8random_initialization(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("random_initialization", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":46
 * 
 *     def random_initialization(self, lower, upper):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.random_initialization(lower, upper)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":47
 *     def random_initialization(self, lower, upper):
 *         if self.dim == 1:
 *             self.thisptr1D.random_initialization(lower, upper)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.random_initialization(lower, upper)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_lower); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 47, __pyx_L1_error)
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_upper); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 47, __pyx_L1_error)
    __pyx_v_self->thisptr1D->random_initialization(__pyx_t_1, __pyx_t_2);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":46
 * 
 *     def random_initialization(self, lower, upper):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.random_initialization(lower, upper)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":49
 *             self.thisptr1D.random_initialization(lower, upper)
 *         elif self.dim == 2:
 *             self.thisptr2D.random_initialization(lower, upper)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.random_initialization(lower, upper)
 */
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_lower); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 49, __pyx_L1_error)
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_upper); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 49, __pyx_L1_error)
    __pyx_v_self->thisptr2D->random_initialization(__pyx_t_2, __pyx_t_1);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":48
 *         if self.dim == 1:
 *             self.thisptr1D.random_initialization(lower, upper)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.random_initialization(lower, upper)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":51
 *             self.thisptr2D.random_initialization(lower, upper)
 *         elif self.dim == 3:
 *             self.thisptr3D.random_initialization(lower, upper)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_lower); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 51, __pyx_L1_error)
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_upper); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 51, __pyx_L1_error)
    __pyx_v_self->thisptr3D->random_initialization(__pyx_t_1, __pyx_t_2);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":50
 *         elif self.dim == 2:
 *             self.thisptr2D.random_initialization(lower, upper)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.random_initialization(lower, upper)
 *         else:
 */
    break;
    default:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":53
 *             self.thisptr3D.random_initialization(lower, upper)
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def from_file(self, fname):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 53, __pyx_L1_error)
    break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":45
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.random_initialization(lower, upper)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":55
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_11from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_11from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_10from_file(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_10from_file(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("from_file", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":56
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":57
 *     def from_file(self, fname):
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 57, __pyx_L1_error)
    __pyx_v_self->thisptr1D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":56
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":59
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 59, __pyx_L1_error)
    __pyx_v_self->thisptr2D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":58
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":61
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 61, __pyx_L1_error)
    __pyx_v_self->thisptr3D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":60
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_file(fname)
 *         else:
 */
    break;
    default:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":63
 *             self.thisptr3D.from_file(fname)
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def from_npy_array(self, npy_array):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(7, 63, __pyx_L1_error)
    break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":55
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":65
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, npy_array):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array([npy_array])
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_npy_array); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_npy_array) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_12from_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), ((PyObject *)__pyx_v_npy_array));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_npy_array) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("from_npy_array", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":66
 * 
 *     def from_npy_array(self, npy_array):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array([npy_array])
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":67
 *     def from_npy_array(self, npy_array):
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array([npy_array])             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array([npy_array])
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_npy_array);
    __Pyx_GIVEREF(__pyx_v_npy_array);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_npy_array);
    try {
      __pyx_v_self->thisptr1D->from_npy_array(__pyx_t_1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 67, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":66
 * 
 *     def from_npy_array(self, npy_array):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array([npy_array])
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":69
 *             self.thisptr1D.from_npy_array([npy_array])
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array([npy_array])             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array([npy_array])
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_npy_array);
    __Pyx_GIVEREF(__pyx_v_npy_array);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_npy_array);
    try {
      __pyx_v_self->thisptr2D->from_npy_array(__pyx_t_1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 69, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":68
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array([npy_array])
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_npy_array([npy_array])
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":71
 *             self.thisptr2D.from_npy_array([npy_array])
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array([npy_array])             # <<<<<<<<<<<<<<
 * 
 *     def to_npy_array(self):
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_npy_array);
    __Pyx_GIVEREF(__pyx_v_npy_array);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_npy_array);
    try {
      __pyx_v_self->thisptr3D->from_npy_array(__pyx_t_1);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 71, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":70
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array([npy_array])
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_npy_array([npy_array])
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":65
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, npy_array):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array([npy_array])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.from_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":73
 *             self.thisptr3D.from_npy_array([npy_array])
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_14to_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("to_npy_array", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":74
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()[0]
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":75
 *     def to_npy_array(self):
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()[0]             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_v_self->thisptr1D->to_npy_array(); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":74
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()[0]
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":77
 *             return self.thisptr1D.to_npy_array()[0]
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()[0]             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()[0]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->thisptr2D->to_npy_array(); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":76
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()[0]
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             return self.thisptr2D.to_npy_array()[0]
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":79
 *             return self.thisptr2D.to_npy_array()[0]
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()[0]             # <<<<<<<<<<<<<<
 * 
 *     def set_adaptive(self, min_step, max_change):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_v_self->thisptr3D->to_npy_array(); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":78
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()[0]
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             return self.thisptr3D.to_npy_array()[0]
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":73
 *             self.thisptr3D.from_npy_array([npy_array])
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()[0]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.to_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":81
 *             return self.thisptr3D.to_npy_array()[0]
 * 
 *     def set_adaptive(self, min_step, max_change):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_17set_adaptive(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_17set_adaptive(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_min_step = 0;
  PyObject *__pyx_v_max_change = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_adaptive (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_step,&__pyx_n_s_max_change,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_step)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_change)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_adaptive", 1, 2, 2, 1); __PYX_ERR(7, 81, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_adaptive") < 0)) __PYX_ERR(7, 81, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_min_step = values[0];
    __pyx_v_max_change = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_adaptive", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 81, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.set_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_16set_adaptive(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), __pyx_v_min_step, __pyx_v_max_change);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_16set_adaptive(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, PyObject *__pyx_v_min_step, PyObject *__pyx_v_max_change) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("set_adaptive", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":82
 * 
 *     def set_adaptive(self, min_step, max_change):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":83
 *     def set_adaptive(self, min_step, max_change):
 *         if self.dim == 1:
 *             return self.thisptr1D.set_adaptive(min_step, max_change)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             return self.thisptr2D.set_adaptive(min_step, max_change)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_step); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 83, __pyx_L1_error)
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_max_change); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 83, __pyx_L1_error)
    __pyx_t_3 = __Pyx_void_to_None(__pyx_v_self->thisptr1D->set_adaptive(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":82
 * 
 *     def set_adaptive(self, min_step, max_change):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":85
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 *         elif self.dim == 2:
 *             return self.thisptr2D.set_adaptive(min_step, max_change)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             return self.thisptr3D.set_adaptive(min_step, max_change)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_min_step); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 85, __pyx_L1_error)
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_max_change); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 85, __pyx_L1_error)
    __pyx_t_3 = __Pyx_void_to_None(__pyx_v_self->thisptr2D->set_adaptive(__pyx_t_2, __pyx_t_1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":84
 *         if self.dim == 1:
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             return self.thisptr2D.set_adaptive(min_step, max_change)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":87
 *             return self.thisptr2D.set_adaptive(min_step, max_change)
 *         elif self.dim == 3:
 *             return self.thisptr3D.set_adaptive(min_step, max_change)             # <<<<<<<<<<<<<<
 * 
 *     def build2D(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_step); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 87, __pyx_L1_error)
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_max_change); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 87, __pyx_L1_error)
    __pyx_t_3 = __Pyx_void_to_None(__pyx_v_self->thisptr3D->set_adaptive(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":86
 *         elif self.dim == 2:
 *             return self.thisptr2D.set_adaptive(min_step, max_change)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             return self.thisptr3D.set_adaptive(min_step, max_change)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":81
 *             return self.thisptr3D.to_npy_array()[0]
 * 
 *     def set_adaptive(self, min_step, max_change):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.set_adaptive(min_step, max_change)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.set_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":89
 *             return self.thisptr3D.set_adaptive(min_step, max_change)
 * 
 *     def build2D(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.build2D()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_19build2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_19build2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build2D (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_18build2D(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_18build2D(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("build2D", 0);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":90
 * 
 *     def build2D(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.build2D()
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":91
 *     def build2D(self):
 *         if self.dim == 1:
 *             return self.thisptr1D.build2D()             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             return self.thisptr2D.build2D()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr1D->build2D()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":90
 * 
 *     def build2D(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.build2D()
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":93
 *             return self.thisptr1D.build2D()
 *         elif self.dim == 2:
 *             return self.thisptr2D.build2D()             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             return self.thisptr3D.build2D()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr2D->build2D()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":92
 *         if self.dim == 1:
 *             return self.thisptr1D.build2D()
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             return self.thisptr2D.build2D()
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":95
 *             return self.thisptr2D.build2D()
 *         elif self.dim == 3:
 *             return self.thisptr3D.build2D()             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_void_to_None(__pyx_v_self->thisptr3D->build2D()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":94
 *         elif self.dim == 2:
 *             return self.thisptr2D.build2D()
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             return self.thisptr3D.build2D()
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":89
 *             return self.thisptr3D.set_adaptive(min_step, max_change)
 * 
 *     def build2D(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.build2D()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.build2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_20__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_22__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyCahnHilliardPhaseField_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCahnHilliardPhaseField.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial_term.pyx":10
 *     cdef PolynomialTerm *thisptr
 * 
 *     def __cinit__(self, inner_power):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned int] vec
 *         for x in inner_power:
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_16PyPolynomialTerm_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_16PyPolynomialTerm_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_inner_power = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inner_power,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inner_power)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 10, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_inner_power = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 10, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyPolynomialTerm___cinit__(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self), __pyx_v_inner_power);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_16PyPolynomialTerm___cinit__(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_inner_power) {
  std::vector<unsigned int>  __pyx_v_vec;
  PyObject *__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":12
 *     def __cinit__(self, inner_power):
 *         cdef vector[unsigned int] vec
 *         for x in inner_power:             # <<<<<<<<<<<<<<
 *             vec.push_back(x)
 *         self.thisptr = new PolynomialTerm(vec)
 */
  if (likely(PyList_CheckExact(__pyx_v_inner_power)) || PyTuple_CheckExact(__pyx_v_inner_power)) {
    __pyx_t_1 = __pyx_v_inner_power; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_inner_power); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 12, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(8, 12, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(8, 12, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(8, 12, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":13
 *         cdef vector[unsigned int] vec
 *         for x in inner_power:
 *             vec.push_back(x)             # <<<<<<<<<<<<<<
 *         self.thisptr = new PolynomialTerm(vec)
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_x); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(8, 13, __pyx_L1_error)
    try {
      __pyx_v_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(8, 13, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":12
 *     def __cinit__(self, inner_power):
 *         cdef vector[unsigned int] vec
 *         for x in inner_power:             # <<<<<<<<<<<<<<
 *             vec.push_back(x)
 *         self.thisptr = new PolynomialTerm(vec)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":14
 *         for x in inner_power:
 *             vec.push_back(x)
 *         self.thisptr = new PolynomialTerm(vec)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new PolynomialTerm(__pyx_v_vec);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":10
 *     cdef PolynomialTerm *thisptr
 * 
 *     def __cinit__(self, inner_power):             # <<<<<<<<<<<<<<
 *         cdef vector[unsigned int] vec
 *         for x in inner_power:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial_term.pyx":16
 *         self.thisptr = new PolynomialTerm(vec)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_16PyPolynomialTerm_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_16PyPolynomialTerm_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":17
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":16
 *         self.thisptr = new PolynomialTerm(vec)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pypolynomial_term.pyx":19
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_5evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_4evaluate(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_4evaluate(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_x) {
  double __pyx_v_c_array[10];
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":20
 * 
 *     def evaluate(self, x):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(8, 20, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 10) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":21
 *     def evaluate(self, x):
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")             # <<<<<<<<<<<<<<
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(8, 21, __pyx_L1_error)

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":20
 * 
 *     def evaluate(self, x):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  }

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":23
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 *         for i in range(len(x)):             # <<<<<<<<<<<<<<
 *             c_array[i] = x[i]
 *         return self.thisptr.evaluate(c_array)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(8, 23, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":24
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 *             c_array[i] = x[i]             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(c_array)
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 24, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_c_array[__pyx_v_i]) = __pyx_t_6;
  }

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":25
 *         for i in range(len(x)):
 *             c_array[i] = x[i]
 *         return self.thisptr.evaluate(c_array)             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x, crd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_v_c_array)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":19
 *         del self.thisptr
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial_term.pyx":27
 *         return self.thisptr.evaluate(c_array)
 * 
 *     def deriv(self, x, crd):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_7deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_crd = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_crd,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_crd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deriv", 1, 2, 2, 1); __PYX_ERR(8, 27, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "deriv") < 0)) __PYX_ERR(8, 27, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_crd = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deriv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 27, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_6deriv(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self), __pyx_v_x, __pyx_v_crd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_6deriv(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_crd) {
  double __pyx_v_c_array[10];
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  unsigned int __pyx_t_7;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":28
 * 
 *     def deriv(self, x, crd):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(8, 28, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 10) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":29
 *     def deriv(self, x, crd):
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")             # <<<<<<<<<<<<<<
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(8, 29, __pyx_L1_error)

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":28
 * 
 *     def deriv(self, x, crd):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  }

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":31
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 *         for i in range(len(x)):             # <<<<<<<<<<<<<<
 *             c_array[i] = x[i]
 *         return self.thisptr.deriv(c_array, crd)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(8, 31, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cemc/phasefield/cython/pypolynomial_term.pyx":32
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 *             c_array[i] = x[i]             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(c_array, crd)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 32, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_c_array[__pyx_v_i]) = __pyx_t_6;
  }

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":33
 *         for i in range(len(x)):
 *             c_array[i] = x[i]
 *         return self.thisptr.deriv(c_array, crd)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_crd); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(8, 33, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->deriv(__pyx_v_c_array, __pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":27
 *         return self.thisptr.evaluate(c_array)
 * 
 *     def deriv(self, x, crd):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_8__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_16PyPolynomialTerm_10__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_16PyPolynomialTerm_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomialTerm.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial.pyx":9
 *     cdef Polynomial *thisptr
 * 
 *     def __cinit__(self, dim):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Polynomial(dim)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_12PyPolynomial_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_12PyPolynomial_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(9, 9, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_dim = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 9, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial___cinit__(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self), __pyx_v_dim);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_12PyPolynomial___cinit__(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pypolynomial.pyx":10
 * 
 *     def __cinit__(self, dim):
 *         self.thisptr = new Polynomial(dim)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_dim); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(9, 10, __pyx_L1_error)
  __pyx_v_self->thisptr = new Polynomial(__pyx_t_1);

  /* "cemc/phasefield/cython/pypolynomial.pyx":9
 *     cdef Polynomial *thisptr
 * 
 *     def __cinit__(self, dim):             # <<<<<<<<<<<<<<
 *         self.thisptr = new Polynomial(dim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial.pyx":12
 *         self.thisptr = new Polynomial(dim)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_12PyPolynomial_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_12PyPolynomial_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_12PyPolynomial_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_12PyPolynomial_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pypolynomial.pyx":13
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def add_term(self, coeff, PyPolynomialTerm new_term):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pypolynomial.pyx":12
 *         self.thisptr = new Polynomial(dim)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pypolynomial.pyx":15
 *         del self.thisptr
 * 
 *     def add_term(self, coeff, PyPolynomialTerm new_term):             # <<<<<<<<<<<<<<
 *         self.thisptr.add_term(coeff, dereference(new_term.thisptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_5add_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_5add_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeff = 0;
  struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_new_term = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_new_term,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_term)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_term", 1, 2, 2, 1); __PYX_ERR(9, 15, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_term") < 0)) __PYX_ERR(9, 15, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_coeff = values[0];
    __pyx_v_new_term = ((struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_term", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 15, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.add_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_new_term), __pyx_ptype_14phasefield_cxx_PyPolynomialTerm, 1, "new_term", 0))) __PYX_ERR(9, 15, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial_4add_term(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self), __pyx_v_coeff, __pyx_v_new_term);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_4add_term(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_coeff, struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm *__pyx_v_new_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("add_term", 0);

  /* "cemc/phasefield/cython/pypolynomial.pyx":16
 * 
 *     def add_term(self, coeff, PyPolynomialTerm new_term):
 *         self.thisptr.add_term(coeff, dereference(new_term.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, x):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 16, __pyx_L1_error)
  (void)(__pyx_v_self->thisptr->add_term(__pyx_t_1, ((PolynomialTerm &)(*__pyx_v_new_term->thisptr))));

  /* "cemc/phasefield/cython/pypolynomial.pyx":15
 *         del self.thisptr
 * 
 *     def add_term(self, coeff, PyPolynomialTerm new_term):             # <<<<<<<<<<<<<<
 *         self.thisptr.add_term(coeff, dereference(new_term.thisptr))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.add_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial.pyx":18
 *         self.thisptr.add_term(coeff, dereference(new_term.thisptr))
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_7evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial_6evaluate(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_6evaluate(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_x) {
  double __pyx_v_c_array[10];
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "cemc/phasefield/cython/pypolynomial.pyx":19
 * 
 *     def evaluate(self, x):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(9, 19, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 10) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cemc/phasefield/cython/pypolynomial.pyx":20
 *     def evaluate(self, x):
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")             # <<<<<<<<<<<<<<
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(9, 20, __pyx_L1_error)

    /* "cemc/phasefield/cython/pypolynomial.pyx":19
 * 
 *     def evaluate(self, x):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  }

  /* "cemc/phasefield/cython/pypolynomial.pyx":22
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 *         for i in range(len(x)):             # <<<<<<<<<<<<<<
 *             c_array[i] = x[i]
 *         return self.thisptr.evaluate(c_array)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cemc/phasefield/cython/pypolynomial.pyx":23
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 *             c_array[i] = x[i]             # <<<<<<<<<<<<<<
 *         return self.thisptr.evaluate(c_array)
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 23, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_c_array[__pyx_v_i]) = __pyx_t_6;
  }

  /* "cemc/phasefield/cython/pypolynomial.pyx":24
 *         for i in range(len(x)):
 *             c_array[i] = x[i]
 *         return self.thisptr.evaluate(c_array)             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x, crd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->evaluate(__pyx_v_c_array)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pypolynomial.pyx":18
 *         self.thisptr.add_term(coeff, dereference(new_term.thisptr))
 * 
 *     def evaluate(self, x):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pypolynomial.pyx":26
 *         return self.thisptr.evaluate(c_array)
 * 
 *     def deriv(self, x, crd):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_9deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_9deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_crd = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_crd,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_crd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deriv", 1, 2, 2, 1); __PYX_ERR(9, 26, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "deriv") < 0)) __PYX_ERR(9, 26, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_crd = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deriv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 26, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial_8deriv(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self), __pyx_v_x, __pyx_v_crd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_8deriv(struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, PyObject *__pyx_v_x, PyObject *__pyx_v_crd) {
  double __pyx_v_c_array[10];
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  unsigned int __pyx_t_7;
  __Pyx_RefNannySetupContext("deriv", 0);

  /* "cemc/phasefield/cython/pypolynomial.pyx":27
 * 
 *     def deriv(self, x, crd):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(9, 27, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 > 10) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "cemc/phasefield/cython/pypolynomial.pyx":28
 *     def deriv(self, x, crd):
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")             # <<<<<<<<<<<<<<
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(9, 28, __pyx_L1_error)

    /* "cemc/phasefield/cython/pypolynomial.pyx":27
 * 
 *     def deriv(self, x, crd):
 *         if len(x) > 10:             # <<<<<<<<<<<<<<
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 */
  }

  /* "cemc/phasefield/cython/pypolynomial.pyx":30
 *             raise ValueError("We only support up to 10 dimensional terms")
 *         cdef double c_array[10]
 *         for i in range(len(x)):             # <<<<<<<<<<<<<<
 *             c_array[i] = x[i]
 *         return self.thisptr.deriv(c_array, crd)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(9, 30, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "cemc/phasefield/cython/pypolynomial.pyx":31
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 *             c_array[i] = x[i]             # <<<<<<<<<<<<<<
 *         return self.thisptr.deriv(c_array, crd)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 31, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_c_array[__pyx_v_i]) = __pyx_t_6;
  }

  /* "cemc/phasefield/cython/pypolynomial.pyx":32
 *         for i in range(len(x)):
 *             c_array[i] = x[i]
 *         return self.thisptr.deriv(c_array, crd)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_crd); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(9, 32, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->thisptr->deriv(__pyx_v_c_array, __pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pypolynomial.pyx":26
 *         return self.thisptr.evaluate(c_array)
 * 
 *     def deriv(self, x, crd):             # <<<<<<<<<<<<<<
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial_10__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_12PyPolynomial_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_12PyPolynomial_12__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyPolynomial *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_12PyPolynomial_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyPolynomial *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyPolynomial.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_6PyCHGL_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_6PyCHGL_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_v_L = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_num_gl_fields = 0;
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_v_gl_damping = 0;
  PyObject *__pyx_v_gradient_coeff = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_num_gl_fields,&__pyx_n_s_M,&__pyx_n_s_alpha,&__pyx_n_s_dt,&__pyx_n_s_gl_damping,&__pyx_n_s_gradient_coeff,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 1); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 2); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_gl_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 3); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 4); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 5); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 6); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gl_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 7); __PYX_ERR(10, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_coeff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 8); __PYX_ERR(10, 19, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(10, 19, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_num_gl_fields = values[3];
    __pyx_v_M = values[4];
    __pyx_v_alpha = values[5];
    __pyx_v_dt = values[6];
    __pyx_v_gl_damping = values[7];
    __pyx_v_gradient_coeff = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL___cinit__(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_num_gl_fields, __pyx_v_M, __pyx_v_alpha, __pyx_v_dt, __pyx_v_gl_damping, __pyx_v_gradient_coeff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_6PyCHGL___cinit__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, PyObject *__pyx_v_num_gl_fields, PyObject *__pyx_v_M, PyObject *__pyx_v_alpha, PyObject *__pyx_v_dt, PyObject *__pyx_v_gl_damping, PyObject *__pyx_v_gradient_coeff) {
  std::vector<std::vector<double> >  __pyx_v_interface;
  std::vector<double>  __pyx_v_inner_vec;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  std::vector<double> ::size_type __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  std::string __pyx_t_12;
  unsigned int __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  CHGL<1>  *__pyx_t_17;
  CHGL<2>  *__pyx_t_18;
  CHGL<3>  *__pyx_t_19;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":22
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             inner_vec.push_back(0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 22, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 22, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 22, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(10, 22, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl.pyx":23
 *         cdef vector[double] inner_vec
 *         for i in range(dim):
 *             inner_vec.push_back(0.0)             # <<<<<<<<<<<<<<
 * 
 *         for item in gradient_coeff:
 */
    try {
      __pyx_v_inner_vec.push_back(0.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 23, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":22
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             inner_vec.push_back(0.0)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/pychgl.pyx":25
 *             inner_vec.push_back(0.0)
 * 
 *         for item in gradient_coeff:             # <<<<<<<<<<<<<<
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 */
  if (likely(PyList_CheckExact(__pyx_v_gradient_coeff)) || PyTuple_CheckExact(__pyx_v_gradient_coeff)) {
    __pyx_t_2 = __pyx_v_gradient_coeff; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_gradient_coeff); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 25, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 25, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 25, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(10, 25, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 25, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(10, 25, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl.pyx":26
 * 
 *         for item in gradient_coeff:
 *             for i in range(len(item)):             # <<<<<<<<<<<<<<
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(10, 26, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 26, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(10, 26, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(10, 26, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 26, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(10, 26, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 26, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(10, 26, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cemc/phasefield/cython/pychgl.pyx":27
 *         for item in gradient_coeff:
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]             # <<<<<<<<<<<<<<
 *             interface.push_back(inner_vec)
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_item, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 27, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 27, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 27, __pyx_L1_error)
      (__pyx_v_inner_vec[__pyx_t_9]) = __pyx_t_8;

      /* "cemc/phasefield/cython/pychgl.pyx":26
 * 
 *         for item in gradient_coeff:
 *             for i in range(len(item)):             # <<<<<<<<<<<<<<
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl.pyx":28
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)             # <<<<<<<<<<<<<<
 * 
 *         if dim == 1:
 */
    try {
      __pyx_v_interface.push_back(__pyx_v_inner_vec);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 28, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":25
 *             inner_vec.push_back(0.0)
 * 
 *         for item in gradient_coeff:             # <<<<<<<<<<<<<<
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/pychgl.pyx":30
 *             interface.push_back(inner_vec)
 * 
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(10, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl.pyx":31
 * 
 *         if dim == 1:
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 *         elif dim == 2:
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 31, __pyx_L1_error)
    try {
      __pyx_t_17 = new CHGL<1> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_8, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 31, __pyx_L1_error)
    }
    __pyx_v_self->thisptr1D = ((CHGL<1>  *)__pyx_t_17);

    /* "cemc/phasefield/cython/pychgl.pyx":30
 *             interface.push_back(inner_vec)
 * 
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 */
    goto __pyx_L9;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":32
 *         if dim == 1:
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(10, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl.pyx":33
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 *         elif dim == 3:
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 33, __pyx_L1_error)
    try {
      __pyx_t_18 = new CHGL<2> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_16, __pyx_t_15, __pyx_t_14, __pyx_t_8, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 33, __pyx_L1_error)
    }
    __pyx_v_self->thisptr2D = ((CHGL<2>  *)__pyx_t_18);

    /* "cemc/phasefield/cython/pychgl.pyx":32
 *         if dim == 1:
 *             self.thisptr1D = new CHGL[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 */
    goto __pyx_L9;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":34
 *         elif dim == 2:
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(10, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl.pyx":35
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 35, __pyx_L1_error)
    try {
      __pyx_t_19 = new CHGL<3> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_8, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 35, __pyx_L1_error)
    }
    __pyx_v_self->thisptr3D = ((CHGL<3>  *)__pyx_t_19);

    /* "cemc/phasefield/cython/pychgl.pyx":34
 *         elif dim == 2:
 *             self.thisptr2D = new CHGL[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 */
  }
  __pyx_L9:;

  /* "cemc/phasefield/cython/pychgl.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":37
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_6PyCHGL_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_6PyCHGL_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  CYTHON_UNUSED PyObject *__pyx_v_L = 0;
  CYTHON_UNUSED PyObject *__pyx_v_prefix = 0;
  CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_M = 0;
  CYTHON_UNUSED PyObject *__pyx_v_alpha = 0;
  CYTHON_UNUSED PyObject *__pyx_v_dt = 0;
  CYTHON_UNUSED PyObject *__pyx_v_gl_damping = 0;
  CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_num_gl_fields,&__pyx_n_s_M,&__pyx_n_s_alpha,&__pyx_n_s_dt,&__pyx_n_s_gl_damping,&__pyx_n_s_gradient_coeff,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 1); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 2); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_gl_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 3); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 4); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 5); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 6); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gl_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 7); __PYX_ERR(10, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_coeff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 8); __PYX_ERR(10, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(10, 37, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_num_gl_fields = values[3];
    __pyx_v_M = values[4];
    __pyx_v_alpha = values[5];
    __pyx_v_dt = values[6];
    __pyx_v_gl_damping = values[7];
    __pyx_v_gradient_coeff = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_2__init__(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_num_gl_fields, __pyx_v_M, __pyx_v_alpha, __pyx_v_dt, __pyx_v_gl_damping, __pyx_v_gradient_coeff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_6PyCHGL_2__init__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_alpha, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_gl_damping, CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":38
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):
 *         self.dim = dim             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dim); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 38, __pyx_L1_error)
  __pyx_v_self->dim = __pyx_t_1;

  /* "cemc/phasefield/cython/pychgl.pyx":37
 *             self.thisptr3D = new CHGL[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":40
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_6PyCHGL_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_6PyCHGL_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_6PyCHGL_4__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_6PyCHGL_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":41
 * 
 *     def __dealloc__(self):
 *         del self.thisptr1D             # <<<<<<<<<<<<<<
 *         del self.thisptr2D
 *         del self.thisptr3D
 */
  delete __pyx_v_self->thisptr1D;

  /* "cemc/phasefield/cython/pychgl.pyx":42
 *     def __dealloc__(self):
 *         del self.thisptr1D
 *         del self.thisptr2D             # <<<<<<<<<<<<<<
 *         del self.thisptr3D
 *         self.thisptr1D = NULL
 */
  delete __pyx_v_self->thisptr2D;

  /* "cemc/phasefield/cython/pychgl.pyx":43
 *         del self.thisptr1D
 *         del self.thisptr2D
 *         del self.thisptr3D             # <<<<<<<<<<<<<<
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL
 */
  delete __pyx_v_self->thisptr3D;

  /* "cemc/phasefield/cython/pychgl.pyx":44
 *         del self.thisptr2D
 *         del self.thisptr3D
 *         self.thisptr1D = NULL             # <<<<<<<<<<<<<<
 *         self.thisptr2D = NULL
 *         self.thisptr3D = NULL
 */
  __pyx_v_self->thisptr1D = NULL;

  /* "cemc/phasefield/cython/pychgl.pyx":45
 *         del self.thisptr3D
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL             # <<<<<<<<<<<<<<
 *         self.thisptr3D = NULL
 * 
 */
  __pyx_v_self->thisptr2D = NULL;

  /* "cemc/phasefield/cython/pychgl.pyx":46
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL
 *         self.thisptr3D = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr3D = NULL;

  /* "cemc/phasefield/cython/pychgl.pyx":40
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pychgl.pyx":49
 * 
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nsteps = 0;
  PyObject *__pyx_v_increment = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nsteps,&__pyx_n_s_increment,&__pyx_n_s_start,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsteps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_increment)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, 1); __PYX_ERR(10, 49, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) __PYX_ERR(10, 49, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nsteps = values[0];
    __pyx_v_increment = values[1];
    __pyx_v_start = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 49, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_6run(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), __pyx_v_nsteps, __pyx_v_increment, __pyx_v_start);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_6run(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("run", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":50
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":51
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 51, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 51, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 51, __pyx_L1_error)
    try {
      __pyx_v_self->thisptr1D->run(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 51, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":50
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":53
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.run(start, nsteps, increment)
 */
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 53, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 53, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 53, __pyx_L1_error)
    try {
      __pyx_v_self->thisptr2D->run(__pyx_t_2, __pyx_t_1, __pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 53, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":52
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":55
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 *             self.thisptr3D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 * 
 *     def from_file(self, fname):
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 55, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(10, 55, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 55, __pyx_L1_error)
    try {
      __pyx_v_self->thisptr3D->run(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 55, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":54
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":49
 * 
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":57
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_9from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_9from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_8from_file(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_8from_file(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("from_file", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":58
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":59
 *     def from_file(self, fname):
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 59, __pyx_L1_error)
    __pyx_v_self->thisptr1D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":58
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":61
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 61, __pyx_L1_error)
    __pyx_v_self->thisptr2D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":60
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":63
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 63, __pyx_L1_error)
    __pyx_v_self->thisptr3D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":62
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_file(fname)
 *         else:
 */
    break;
    default:

    /* "cemc/phasefield/cython/pychgl.pyx":65
 *             self.thisptr3D.from_file(fname)
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def random_initialization(self, lower, upper):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(10, 65, __pyx_L1_error)
    break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":57
 *             self.thisptr3D.run(start, nsteps, increment)
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":67
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_11random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_11random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_initialization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, 1); __PYX_ERR(10, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_initialization") < 0)) __PYX_ERR(10, 67, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lower = values[0];
    __pyx_v_upper = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_10random_initialization(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_10random_initialization(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("random_initialization", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":68
 * 
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):             # <<<<<<<<<<<<<<
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_lower); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(10, 68, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pychgl.pyx":69
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):
 *             if self.dim == 1:             # <<<<<<<<<<<<<<
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 */
    switch (__pyx_v_self->dim) {
      case 1:

      /* "cemc/phasefield/cython/pychgl.pyx":70
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 70, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 70, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr1D->random_initialization(__pyx_v_i, __pyx_t_5, __pyx_t_6);

      /* "cemc/phasefield/cython/pychgl.pyx":69
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):
 *             if self.dim == 1:             # <<<<<<<<<<<<<<
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 */
      break;
      case 2:

      /* "cemc/phasefield/cython/pychgl.pyx":72
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             elif self.dim == 3:
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 72, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr2D->random_initialization(__pyx_v_i, __pyx_t_6, __pyx_t_5);

      /* "cemc/phasefield/cython/pychgl.pyx":71
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:             # <<<<<<<<<<<<<<
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:
 */
      break;
      case 3:

      /* "cemc/phasefield/cython/pychgl.pyx":74
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 74, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 74, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr3D->random_initialization(__pyx_v_i, __pyx_t_5, __pyx_t_6);

      /* "cemc/phasefield/cython/pychgl.pyx":73
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:             # <<<<<<<<<<<<<<
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 *             else:
 */
      break;
      default:

      /* "cemc/phasefield/cython/pychgl.pyx":76
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 *             else:
 *                 raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def from_npy_array(self, arrays):
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 76, __pyx_L1_error)
      break;
    }
  }

  /* "cemc/phasefield/cython/pychgl.pyx":67
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":78
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, arrays):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_arrays); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_arrays) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_12from_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v_arrays));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_arrays) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_npy_array", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":79
 * 
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":80
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)
 */
    try {
      __pyx_v_self->thisptr1D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 80, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":79
 * 
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":82
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array(arrays)
 */
    try {
      __pyx_v_self->thisptr2D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 82, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":81
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":84
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 * 
 *     def to_npy_array(self):
 */
    try {
      __pyx_v_self->thisptr3D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 84, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":83
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":78
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, arrays):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.from_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":86
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_14to_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_npy_array", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":87
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":88
 *     def to_npy_array(self):
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr1D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 88, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 88, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl.pyx":87
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":90
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr2D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 90, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 90, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl.pyx":89
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":92
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()             # <<<<<<<<<<<<<<
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr3D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 92, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 92, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl.pyx":91
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             return self.thisptr3D.to_npy_array()
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":86
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.to_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":94
 *             return self.thisptr3D.to_npy_array()
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_17set_free_energy(PyObject *__pyx_v_self, PyObject *__pyx_v_term); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_17set_free_energy(PyObject *__pyx_v_self, PyObject *__pyx_v_term) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_free_energy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), __pyx_ptype_14phasefield_cxx_PyTwoPhaseLandau, 1, "term", 0))) __PYX_ERR(10, 94, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_16set_free_energy(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_term));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_16set_free_energy(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_free_energy", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":95
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":96
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 */
    try {
      __pyx_v_self->thisptr1D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 96, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":95
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":98
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 */
    try {
      __pyx_v_self->thisptr2D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 98, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":97
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":100
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def print_polynomial(self):
 */
    try {
      __pyx_v_self->thisptr3D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(10, 100, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl.pyx":99
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":94
 *             return self.thisptr3D.to_npy_array()
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.set_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":102
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 *     def print_polynomial(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_19print_polynomial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_19print_polynomial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_polynomial (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_18print_polynomial(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_18print_polynomial(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_polynomial", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":103
 * 
 *     def print_polynomial(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":104
 *     def print_polynomial(self):
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()
 */
    __pyx_v_self->thisptr1D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl.pyx":103
 * 
 *     def print_polynomial(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":106
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.print_polynomial()
 */
    __pyx_v_self->thisptr2D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl.pyx":105
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":108
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:
 *             self.thisptr3D.print_polynomial()             # <<<<<<<<<<<<<<
 * 
 *     def save_free_energy_map(self, fname):
 */
    __pyx_v_self->thisptr3D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl.pyx":107
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.print_polynomial()
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":102
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 *     def print_polynomial(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":110
 *             self.thisptr3D.print_polynomial()
 * 
 *     def save_free_energy_map(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_21save_free_energy_map(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_21save_free_energy_map(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_free_energy_map (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_20save_free_energy_map(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_20save_free_energy_map(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("save_free_energy_map", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":111
 * 
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":112
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 112, __pyx_L1_error)
    __pyx_v_self->thisptr1D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":111
 * 
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":114
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.save_free_energy_map(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 114, __pyx_L1_error)
    __pyx_v_self->thisptr2D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":113
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":116
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:
 *             self.thisptr3D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(10, 116, __pyx_L1_error)
    __pyx_v_self->thisptr3D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":115
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":110
 *             self.thisptr3D.print_polynomial()
 * 
 *     def save_free_energy_map(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.save_free_energy_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":118
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_23use_HeLiuTang_stabilizer(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_23use_HeLiuTang_stabilizer(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("use_HeLiuTang_stabilizer (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_22use_HeLiuTang_stabilizer(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v_coeff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_22use_HeLiuTang_stabilizer(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_coeff) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("use_HeLiuTang_stabilizer", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":119
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":120
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 120, __pyx_L1_error)
    __pyx_v_self->thisptr1D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":119
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":122
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 122, __pyx_L1_error)
    __pyx_v_self->thisptr2D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":121
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":124
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 124, __pyx_L1_error)
    __pyx_v_self->thisptr3D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":123
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":118
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.use_HeLiuTang_stabilizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":126
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_25use_adaptive_stepping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_25use_adaptive_stepping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_min_dt = 0;
  PyObject *__pyx_v_increase_every_update = 0;
  PyObject *__pyx_v_low_en_cut = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("use_adaptive_stepping (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_dt,&__pyx_n_s_increase_every_update,&__pyx_n_s_low_en_cut,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_increase_every_update)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("use_adaptive_stepping", 0, 2, 3, 1); __PYX_ERR(10, 126, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_low_en_cut);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "use_adaptive_stepping") < 0)) __PYX_ERR(10, 126, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_min_dt = values[0];
    __pyx_v_increase_every_update = values[1];
    __pyx_v_low_en_cut = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("use_adaptive_stepping", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 126, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.use_adaptive_stepping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_24use_adaptive_stepping(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), __pyx_v_min_dt, __pyx_v_increase_every_update, __pyx_v_low_en_cut);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_24use_adaptive_stepping(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_min_dt, PyObject *__pyx_v_increase_every_update, PyObject *__pyx_v_low_en_cut) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("use_adaptive_stepping", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":127
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":128
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 128, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 128, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 128, __pyx_L1_error)
    __pyx_v_self->thisptr1D->use_adaptive_stepping(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pychgl.pyx":127
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":130
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 130, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 130, __pyx_L1_error)
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 130, __pyx_L1_error)
    __pyx_v_self->thisptr2D->use_adaptive_stepping(__pyx_t_3, __pyx_t_2, __pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":129
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":132
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 * 
 *     def set_filter(self, width):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 132, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 132, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 132, __pyx_L1_error)
    __pyx_v_self->thisptr3D->use_adaptive_stepping(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pychgl.pyx":131
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":126
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.use_adaptive_stepping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl.pyx":134
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 *     def set_filter(self, width):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_27set_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_width); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_27set_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_filter (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_26set_filter(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_26set_filter(struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_filter", 0);

  /* "cemc/phasefield/cython/pychgl.pyx":135
 * 
 *     def set_filter(self, width):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl.pyx":136
 *     def set_filter(self, width):
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 136, __pyx_L1_error)
    __pyx_v_self->thisptr1D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":135
 * 
 *     def set_filter(self, width):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl.pyx":138
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.set_filter(width)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 138, __pyx_L1_error)
    __pyx_v_self->thisptr2D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":137
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl.pyx":140
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:
 *             self.thisptr3D.set_filter(width)             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(10, 140, __pyx_L1_error)
    __pyx_v_self->thisptr3D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl.pyx":139
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.set_filter(width)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl.pyx":134
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 *     def set_filter(self, width):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.set_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_28__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_6PyCHGL_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_6PyCHGL_30__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyCHGL *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_6PyCHGL_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGL *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGL.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  PyObject *__pyx_v_L = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_num_gl_fields = 0;
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_alpha = 0;
  PyObject *__pyx_v_dt = 0;
  PyObject *__pyx_v_gl_damping = 0;
  PyObject *__pyx_v_gradient_coeff = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_num_gl_fields,&__pyx_n_s_M,&__pyx_n_s_alpha,&__pyx_n_s_dt,&__pyx_n_s_gl_damping,&__pyx_n_s_gradient_coeff,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 1); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 2); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_gl_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 3); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 4); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 5); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 6); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gl_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 7); __PYX_ERR(11, 19, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_coeff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, 8); __PYX_ERR(11, 19, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 19, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_num_gl_fields = values[3];
    __pyx_v_M = values[4];
    __pyx_v_alpha = values[5];
    __pyx_v_dt = values[6];
    __pyx_v_gl_damping = values[7];
    __pyx_v_gradient_coeff = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace___cinit__(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_num_gl_fields, __pyx_v_M, __pyx_v_alpha, __pyx_v_dt, __pyx_v_gl_damping, __pyx_v_gradient_coeff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace___cinit__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_dim, PyObject *__pyx_v_L, PyObject *__pyx_v_prefix, PyObject *__pyx_v_num_gl_fields, PyObject *__pyx_v_M, PyObject *__pyx_v_alpha, PyObject *__pyx_v_dt, PyObject *__pyx_v_gl_damping, PyObject *__pyx_v_gradient_coeff) {
  std::vector<std::vector<double> >  __pyx_v_interface;
  std::vector<double>  __pyx_v_inner_vec;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  std::vector<double> ::size_type __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  std::string __pyx_t_12;
  unsigned int __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  CHGLRealSpace<1>  *__pyx_t_17;
  CHGLRealSpace<2>  *__pyx_t_18;
  CHGLRealSpace<3>  *__pyx_t_19;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":22
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             inner_vec.push_back(0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 22, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 22, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 22, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 22, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 22, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":23
 *         cdef vector[double] inner_vec
 *         for i in range(dim):
 *             inner_vec.push_back(0.0)             # <<<<<<<<<<<<<<
 * 
 *         for item in gradient_coeff:
 */
    try {
      __pyx_v_inner_vec.push_back(0.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 23, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":22
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 *         for i in range(dim):             # <<<<<<<<<<<<<<
 *             inner_vec.push_back(0.0)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":25
 *             inner_vec.push_back(0.0)
 * 
 *         for item in gradient_coeff:             # <<<<<<<<<<<<<<
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 */
  if (likely(PyList_CheckExact(__pyx_v_gradient_coeff)) || PyTuple_CheckExact(__pyx_v_gradient_coeff)) {
    __pyx_t_2 = __pyx_v_gradient_coeff; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_gradient_coeff); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 25, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 25, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 25, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 25, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 25, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 25, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":26
 * 
 *         for item in gradient_coeff:
 *             for i in range(len(item)):             # <<<<<<<<<<<<<<
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_item); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(11, 26, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 26, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 26, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 26, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 26, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(11, 26, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 26, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(11, 26, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":27
 *         for item in gradient_coeff:
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]             # <<<<<<<<<<<<<<
 *             interface.push_back(inner_vec)
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_item, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 27, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 27, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(11, 27, __pyx_L1_error)
      (__pyx_v_inner_vec[__pyx_t_9]) = __pyx_t_8;

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":26
 * 
 *         for item in gradient_coeff:
 *             for i in range(len(item)):             # <<<<<<<<<<<<<<
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":28
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 *             interface.push_back(inner_vec)             # <<<<<<<<<<<<<<
 * 
 *         if dim == 1:
 */
    try {
      __pyx_v_interface.push_back(__pyx_v_inner_vec);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 28, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":25
 *             inner_vec.push_back(0.0)
 * 
 *         for item in gradient_coeff:             # <<<<<<<<<<<<<<
 *             for i in range(len(item)):
 *                 inner_vec[i] = item[i]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":30
 *             interface.push_back(inner_vec)
 * 
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(11, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":31
 * 
 *         if dim == 1:
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 *         elif dim == 2:
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 31, __pyx_L1_error)
    try {
      __pyx_t_17 = new CHGLRealSpace<1> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_8, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 31, __pyx_L1_error)
    }
    __pyx_v_self->thisptr1D = __pyx_t_17;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":30
 *             interface.push_back(inner_vec)
 * 
 *         if dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 */
    goto __pyx_L9;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":32
 *         if dim == 1:
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(11, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":33
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 *         elif dim == 3:
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 33, __pyx_L1_error)
    try {
      __pyx_t_18 = new CHGLRealSpace<2> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_16, __pyx_t_15, __pyx_t_14, __pyx_t_8, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 33, __pyx_L1_error)
    }
    __pyx_v_self->thisptr2D = __pyx_t_18;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":32
 *         if dim == 1:
 *             self.thisptr1D = new CHGLRealSpace[intParameter1](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 */
    goto __pyx_L9;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":34
 *         elif dim == 2:
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_dim, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(11, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":35
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_L); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_gl_fields); if (unlikely((__pyx_t_13 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_M); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_v_alpha); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_v_dt); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_gl_damping); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 35, __pyx_L1_error)
    try {
      __pyx_t_19 = new CHGLRealSpace<3> (__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_8, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_v_interface);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 35, __pyx_L1_error)
    }
    __pyx_v_self->thisptr3D = __pyx_t_19;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":34
 *         elif dim == 2:
 *             self.thisptr2D = new CHGLRealSpace[intParameter2](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 *         elif dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 */
  }
  __pyx_L9:;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":19
 *     cdef int dim
 * 
 *     def __cinit__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[double]] interface
 *         cdef vector[double] inner_vec
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":37
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dim = 0;
  CYTHON_UNUSED PyObject *__pyx_v_L = 0;
  CYTHON_UNUSED PyObject *__pyx_v_prefix = 0;
  CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields = 0;
  CYTHON_UNUSED PyObject *__pyx_v_M = 0;
  CYTHON_UNUSED PyObject *__pyx_v_alpha = 0;
  CYTHON_UNUSED PyObject *__pyx_v_dt = 0;
  CYTHON_UNUSED PyObject *__pyx_v_gl_damping = 0;
  CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dim,&__pyx_n_s_L,&__pyx_n_s_prefix,&__pyx_n_s_num_gl_fields,&__pyx_n_s_M,&__pyx_n_s_alpha,&__pyx_n_s_dt,&__pyx_n_s_gl_damping,&__pyx_n_s_gradient_coeff,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 1); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 2); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_gl_fields)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 3); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 4); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 5); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 6); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gl_damping)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 7); __PYX_ERR(11, 37, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_coeff)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, 8); __PYX_ERR(11, 37, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(11, 37, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_dim = values[0];
    __pyx_v_L = values[1];
    __pyx_v_prefix = values[2];
    __pyx_v_num_gl_fields = values[3];
    __pyx_v_M = values[4];
    __pyx_v_alpha = values[5];
    __pyx_v_dt = values[6];
    __pyx_v_gl_damping = values[7];
    __pyx_v_gradient_coeff = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 37, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_2__init__(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_dim, __pyx_v_L, __pyx_v_prefix, __pyx_v_num_gl_fields, __pyx_v_M, __pyx_v_alpha, __pyx_v_dt, __pyx_v_gl_damping, __pyx_v_gradient_coeff);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_2__init__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_dim, CYTHON_UNUSED PyObject *__pyx_v_L, CYTHON_UNUSED PyObject *__pyx_v_prefix, CYTHON_UNUSED PyObject *__pyx_v_num_gl_fields, CYTHON_UNUSED PyObject *__pyx_v_M, CYTHON_UNUSED PyObject *__pyx_v_alpha, CYTHON_UNUSED PyObject *__pyx_v_dt, CYTHON_UNUSED PyObject *__pyx_v_gl_damping, CYTHON_UNUSED PyObject *__pyx_v_gradient_coeff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":38
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):
 *         self.dim = dim             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_dim); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 38, __pyx_L1_error)
  __pyx_v_self->dim = __pyx_t_1;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":37
 *             self.thisptr3D = new CHGLRealSpace[intParameter3](L, prefix, num_gl_fields, M, alpha, dt, gl_damping, interface)
 * 
 *     def __init__(self, dim, L, prefix, num_gl_fields, M, alpha, dt, gl_damping, gradient_coeff):             # <<<<<<<<<<<<<<
 *         self.dim = dim
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":40
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_4__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_4__dealloc__(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":41
 * 
 *     def __dealloc__(self):
 *         del self.thisptr1D             # <<<<<<<<<<<<<<
 *         del self.thisptr2D
 *         del self.thisptr3D
 */
  delete __pyx_v_self->thisptr1D;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":42
 *     def __dealloc__(self):
 *         del self.thisptr1D
 *         del self.thisptr2D             # <<<<<<<<<<<<<<
 *         del self.thisptr3D
 *         self.thisptr1D = NULL
 */
  delete __pyx_v_self->thisptr2D;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":43
 *         del self.thisptr1D
 *         del self.thisptr2D
 *         del self.thisptr3D             # <<<<<<<<<<<<<<
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL
 */
  delete __pyx_v_self->thisptr3D;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":44
 *         del self.thisptr2D
 *         del self.thisptr3D
 *         self.thisptr1D = NULL             # <<<<<<<<<<<<<<
 *         self.thisptr2D = NULL
 *         self.thisptr3D = NULL
 */
  __pyx_v_self->thisptr1D = NULL;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":45
 *         del self.thisptr3D
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL             # <<<<<<<<<<<<<<
 *         self.thisptr3D = NULL
 * 
 */
  __pyx_v_self->thisptr2D = NULL;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":46
 *         self.thisptr1D = NULL
 *         self.thisptr2D = NULL
 *         self.thisptr3D = NULL             # <<<<<<<<<<<<<<
 * 
 *     def run(self, nsteps, increment, start=0):
 */
  __pyx_v_self->thisptr3D = NULL;

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":40
 *         self.dim = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr1D
 *         del self.thisptr2D
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":48
 *         self.thisptr3D = NULL
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nsteps = 0;
  PyObject *__pyx_v_increment = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nsteps,&__pyx_n_s_increment,&__pyx_n_s_start,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsteps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_increment)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, 1); __PYX_ERR(11, 48, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) __PYX_ERR(11, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nsteps = values[0];
    __pyx_v_increment = values[1];
    __pyx_v_start = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_6run(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_nsteps, __pyx_v_increment, __pyx_v_start);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_6run(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_nsteps, PyObject *__pyx_v_increment, PyObject *__pyx_v_start) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("run", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":49
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":50
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 */
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 50, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 50, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 50, __pyx_L1_error)
    try {
      __pyx_v_self->thisptr1D->run(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 50, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":49
 * 
 *     def run(self, nsteps, increment, start=0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":52
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3.run(start, nsteps, increment)
 */
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_start); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 52, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 52, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_increment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 52, __pyx_L1_error)
    try {
      __pyx_v_self->thisptr2D->run(__pyx_t_2, __pyx_t_1, __pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 52, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":51
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":54
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:
 *             self.thisptr3.run(start, nsteps, increment)             # <<<<<<<<<<<<<<
 * 
 *     def from_file(self, fname):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thisptr3); if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_run); if (unlikely(!__pyx_t_6)) __PYX_ERR(11, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_3 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_3 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_start, __pyx_v_nsteps, __pyx_v_increment};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_start, __pyx_v_nsteps, __pyx_v_increment};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_3, 3+__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 54, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(11, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_start);
      __Pyx_GIVEREF(__pyx_v_start);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_3, __pyx_v_start);
      __Pyx_INCREF(__pyx_v_nsteps);
      __Pyx_GIVEREF(__pyx_v_nsteps);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_3, __pyx_v_nsteps);
      __Pyx_INCREF(__pyx_v_increment);
      __Pyx_GIVEREF(__pyx_v_increment);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_3, __pyx_v_increment);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":53
 *         elif self.dim == 2:
 *             self.thisptr2D.run(start, nsteps, increment)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3.run(start, nsteps, increment)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":48
 *         self.thisptr3D = NULL
 * 
 *     def run(self, nsteps, increment, start=0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.run(start, nsteps, increment)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":56
 *             self.thisptr3.run(start, nsteps, increment)
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_9from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_9from_file(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_file (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_8from_file(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_8from_file(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("from_file", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":57
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":58
 *     def from_file(self, fname):
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 58, __pyx_L1_error)
    __pyx_v_self->thisptr1D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":57
 * 
 *     def from_file(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":60
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 60, __pyx_L1_error)
    __pyx_v_self->thisptr2D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":59
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":62
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:
 *             self.thisptr3D.from_file(fname)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 62, __pyx_L1_error)
    __pyx_v_self->thisptr3D->from_file(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":61
 *         elif self.dim == 2:
 *             self.thisptr2D.from_file(fname)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_file(fname)
 *         else:
 */
    break;
    default:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":64
 *             self.thisptr3D.from_file(fname)
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def random_initialization(self, lower, upper):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(11, 64, __pyx_L1_error)
    break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":56
 *             self.thisptr3.run(start, nsteps, increment)
 * 
 *     def from_file(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_file(fname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":66
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_11random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_11random_initialization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lower = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_initialization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lower,&__pyx_n_s_upper,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lower)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_upper)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, 1); __PYX_ERR(11, 66, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_initialization") < 0)) __PYX_ERR(11, 66, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lower = values[0];
    __pyx_v_upper = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_initialization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 66, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_10random_initialization(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_lower, __pyx_v_upper);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_10random_initialization(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_lower, PyObject *__pyx_v_upper) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("random_initialization", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":67
 * 
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):             # <<<<<<<<<<<<<<
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_lower); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(11, 67, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":68
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):
 *             if self.dim == 1:             # <<<<<<<<<<<<<<
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 */
    switch (__pyx_v_self->dim) {
      case 1:

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":69
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 69, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 69, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr1D->random_initialization(__pyx_v_i, __pyx_t_5, __pyx_t_6);

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":68
 *     def random_initialization(self, lower, upper):
 *         for i in range(len(lower)):
 *             if self.dim == 1:             # <<<<<<<<<<<<<<
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 */
      break;
      case 2:

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":71
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             elif self.dim == 3:
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 71, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr2D->random_initialization(__pyx_v_i, __pyx_t_6, __pyx_t_5);

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":70
 *             if self.dim == 1:
 *                 self.thisptr1D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 2:             # <<<<<<<<<<<<<<
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:
 */
      break;
      case 3:

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":73
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_lower, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 73, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_upper, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 73, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->thisptr3D->random_initialization(__pyx_v_i, __pyx_t_5, __pyx_t_6);

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":72
 *             elif self.dim == 2:
 *                 self.thisptr2D.random_initialization(i, lower[i], upper[i])
 *             elif self.dim == 3:             # <<<<<<<<<<<<<<
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 *             else:
 */
      break;
      default:

      /* "cemc/phasefield/cython/pychgl_realspace.pyx":75
 *                 self.thisptr3D.random_initialization(i, lower[i], upper[i])
 *             else:
 *                 raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def from_npy_array(self, arrays):
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(11, 75, __pyx_L1_error)
      break;
    }
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":66
 *             raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def random_initialization(self, lower, upper):             # <<<<<<<<<<<<<<
 *         for i in range(len(lower)):
 *             if self.dim == 1:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.random_initialization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":77
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, arrays):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_arrays); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_13from_npy_array(PyObject *__pyx_v_self, PyObject *__pyx_v_arrays) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_12from_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_arrays));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_12from_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_arrays) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_npy_array", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":78
 * 
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":79
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)
 */
    try {
      __pyx_v_self->thisptr1D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 79, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":78
 * 
 *     def from_npy_array(self, arrays):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":81
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array(arrays)
 */
    try {
      __pyx_v_self->thisptr2D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 81, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":80
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":83
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:
 *             self.thisptr3D.from_npy_array(arrays)             # <<<<<<<<<<<<<<
 * 
 *     def to_npy_array(self):
 */
    try {
      __pyx_v_self->thisptr3D->from_npy_array(__pyx_v_arrays);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 83, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":82
 *         elif self.dim == 2:
 *             self.thisptr2D.from_npy_array(arrays)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":77
 *                 raise ValueError("Dimension has to be 1, 2, or 3")
 * 
 *     def from_npy_array(self, arrays):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.from_npy_array(arrays)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.from_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":85
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_15to_npy_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_npy_array (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_14to_npy_array(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_14to_npy_array(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_npy_array", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":86
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":87
 *     def to_npy_array(self):
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr1D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 87, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 87, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":86
 * 
 *     def to_npy_array(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":89
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr2D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 89, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 89, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":88
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":91
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:
 *             return self.thisptr3D.to_npy_array()             # <<<<<<<<<<<<<<
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_1 = __pyx_v_self->thisptr3D->to_npy_array();
      if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 91, __pyx_L1_error)
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 91, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":90
 *         elif self.dim == 2:
 *             return self.thisptr2D.to_npy_array()
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             return self.thisptr3D.to_npy_array()
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":85
 *             self.thisptr3D.from_npy_array(arrays)
 * 
 *     def to_npy_array(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             return self.thisptr1D.to_npy_array()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.to_npy_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":93
 *             return self.thisptr3D.to_npy_array()
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_17set_free_energy(PyObject *__pyx_v_self, PyObject *__pyx_v_term); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_17set_free_energy(PyObject *__pyx_v_self, PyObject *__pyx_v_term) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_free_energy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), __pyx_ptype_14phasefield_cxx_PyTwoPhaseLandau, 1, "term", 0))) __PYX_ERR(11, 93, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_16set_free_energy(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *)__pyx_v_term));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_16set_free_energy(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau *__pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_free_energy", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":94
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":95
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 */
    try {
      __pyx_v_self->thisptr1D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 95, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":94
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":97
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 */
    try {
      __pyx_v_self->thisptr2D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 97, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":96
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":99
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def print_polynomial(self):
 */
    try {
      __pyx_v_self->thisptr3D->set_free_energy(((TwoPhaseLandau &)(*__pyx_v_term->thisptr)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(11, 99, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":98
 *         elif self.dim == 2:
 *             self.thisptr2D.set_free_energy(deref(term.thisptr))
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":93
 *             return self.thisptr3D.to_npy_array()
 * 
 *     def set_free_energy(self, PyTwoPhaseLandau term):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_free_energy(deref(term.thisptr))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.set_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":101
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 *     def print_polynomial(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_19print_polynomial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_19print_polynomial(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_polynomial (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_18print_polynomial(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_18print_polynomial(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_polynomial", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":102
 * 
 *     def print_polynomial(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":103
 *     def print_polynomial(self):
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()
 */
    __pyx_v_self->thisptr1D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":102
 * 
 *     def print_polynomial(self):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":105
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.print_polynomial()
 */
    __pyx_v_self->thisptr2D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":104
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":107
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:
 *             self.thisptr3D.print_polynomial()             # <<<<<<<<<<<<<<
 * 
 *     def save_free_energy_map(self, fname):
 */
    __pyx_v_self->thisptr3D->print_polynomial();

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":106
 *         elif self.dim == 2:
 *             self.thisptr2D.print_polynomial()
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.print_polynomial()
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":101
 *             self.thisptr3D.set_free_energy(deref(term.thisptr))
 * 
 *     def print_polynomial(self):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.print_polynomial()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":109
 *             self.thisptr3D.print_polynomial()
 * 
 *     def save_free_energy_map(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_21save_free_energy_map(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_21save_free_energy_map(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_free_energy_map (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_20save_free_energy_map(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_20save_free_energy_map(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("save_free_energy_map", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":110
 * 
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":111
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 111, __pyx_L1_error)
    __pyx_v_self->thisptr1D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":110
 * 
 *     def save_free_energy_map(self, fname):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":113
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.save_free_energy_map(fname)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 113, __pyx_L1_error)
    __pyx_v_self->thisptr2D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":112
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":115
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:
 *             self.thisptr3D.save_free_energy_map(fname)             # <<<<<<<<<<<<<<
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 115, __pyx_L1_error)
    __pyx_v_self->thisptr3D->save_free_energy_map(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":114
 *         elif self.dim == 2:
 *             self.thisptr2D.save_free_energy_map(fname)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":109
 *             self.thisptr3D.print_polynomial()
 * 
 *     def save_free_energy_map(self, fname):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_free_energy_map(fname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.save_free_energy_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":117
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_23use_HeLiuTang_stabilizer(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_23use_HeLiuTang_stabilizer(PyObject *__pyx_v_self, PyObject *__pyx_v_coeff) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("use_HeLiuTang_stabilizer (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_22use_HeLiuTang_stabilizer(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_coeff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_22use_HeLiuTang_stabilizer(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_coeff) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("use_HeLiuTang_stabilizer", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":118
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":119
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 119, __pyx_L1_error)
    __pyx_v_self->thisptr1D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":118
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":121
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 121, __pyx_L1_error)
    __pyx_v_self->thisptr2D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":120
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":123
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)             # <<<<<<<<<<<<<<
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_coeff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 123, __pyx_L1_error)
    __pyx_v_self->thisptr3D->use_HeLiuTang_stabilizer(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":122
 *         elif self.dim == 2:
 *             self.thisptr2D.use_HeLiuTang_stabilizer(coeff)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":117
 *             self.thisptr3D.save_free_energy_map(fname)
 * 
 *     def use_HeLiuTang_stabilizer(self, coeff):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_HeLiuTang_stabilizer(coeff)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.use_HeLiuTang_stabilizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":125
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_25use_adaptive_stepping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_25use_adaptive_stepping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_min_dt = 0;
  PyObject *__pyx_v_increase_every_update = 0;
  PyObject *__pyx_v_low_en_cut = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("use_adaptive_stepping (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_dt,&__pyx_n_s_increase_every_update,&__pyx_n_s_low_en_cut,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_float_0_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_dt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_increase_every_update)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("use_adaptive_stepping", 0, 2, 3, 1); __PYX_ERR(11, 125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_low_en_cut);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "use_adaptive_stepping") < 0)) __PYX_ERR(11, 125, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_min_dt = values[0];
    __pyx_v_increase_every_update = values[1];
    __pyx_v_low_en_cut = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("use_adaptive_stepping", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.use_adaptive_stepping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_24use_adaptive_stepping(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_min_dt, __pyx_v_increase_every_update, __pyx_v_low_en_cut);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_24use_adaptive_stepping(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_min_dt, PyObject *__pyx_v_increase_every_update, PyObject *__pyx_v_low_en_cut) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("use_adaptive_stepping", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":126
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":127
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 127, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 127, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 127, __pyx_L1_error)
    __pyx_v_self->thisptr1D->use_adaptive_stepping(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":126
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":129
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 129, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 129, __pyx_L1_error)
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 129, __pyx_L1_error)
    __pyx_v_self->thisptr2D->use_adaptive_stepping(__pyx_t_3, __pyx_t_2, __pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":128
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":131
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)             # <<<<<<<<<<<<<<
 * 
 *     def set_filter(self, width):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_min_dt); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 131, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_increase_every_update); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 131, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_low_en_cut); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 131, __pyx_L1_error)
    __pyx_v_self->thisptr3D->use_adaptive_stepping(__pyx_t_1, __pyx_t_2, __pyx_t_3);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":130
 *         elif self.dim == 2:
 *             self.thisptr2D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":125
 *             self.thisptr3D.use_HeLiuTang_stabilizer(coeff)
 * 
 *     def use_adaptive_stepping(self, min_dt, increase_every_update, low_en_cut=0.0):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.use_adaptive_stepping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":133
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 *     def set_filter(self, width):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_27set_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_width); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_27set_filter(PyObject *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_filter (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_26set_filter(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_26set_filter(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_filter", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":134
 * 
 *     def set_filter(self, width):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":135
 *     def set_filter(self, width):
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 135, __pyx_L1_error)
    __pyx_v_self->thisptr1D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":134
 * 
 *     def set_filter(self, width):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":137
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.set_filter(width)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 137, __pyx_L1_error)
    __pyx_v_self->thisptr2D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":136
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":139
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:
 *             self.thisptr3D.set_filter(width)             # <<<<<<<<<<<<<<
 * 
 *     def build2D(self):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_width); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 139, __pyx_L1_error)
    __pyx_v_self->thisptr3D->set_filter(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":138
 *         elif self.dim == 2:
 *             self.thisptr2D.set_filter(width)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.set_filter(width)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":133
 *             self.thisptr3D.use_adaptive_stepping(min_dt, increase_every_update, low_en_cut)
 * 
 *     def set_filter(self, width):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_filter(width)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.set_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":141
 *             self.thisptr3D.set_filter(width)
 * 
 *     def build2D(self):             # <<<<<<<<<<<<<<
 *         self.thisptr2D.build2D()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_29build2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_29build2D(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build2D (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_28build2D(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_28build2D(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build2D", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":142
 * 
 *     def build2D(self):
 *         self.thisptr2D.build2D()             # <<<<<<<<<<<<<<
 * 
 *     def set_cook_noise(self, amplitude):
 */
  try {
    __pyx_v_self->thisptr2D->build2D();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(11, 142, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":141
 *             self.thisptr3D.set_filter(width)
 * 
 *     def build2D(self):             # <<<<<<<<<<<<<<
 *         self.thisptr2D.build2D()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.build2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":144
 *         self.thisptr2D.build2D()
 * 
 *     def set_cook_noise(self, amplitude):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_cook_noise(amplitude)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_31set_cook_noise(PyObject *__pyx_v_self, PyObject *__pyx_v_amplitude); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_31set_cook_noise(PyObject *__pyx_v_self, PyObject *__pyx_v_amplitude) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cook_noise (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_30set_cook_noise(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v_amplitude));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_30set_cook_noise(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_amplitude) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("set_cook_noise", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":145
 * 
 *     def set_cook_noise(self, amplitude):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_cook_noise(amplitude)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":146
 *     def set_cook_noise(self, amplitude):
 *         if self.dim == 1:
 *             self.thisptr1D.set_cook_noise(amplitude)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.set_cook_noise(amplitude)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_amplitude); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 146, __pyx_L1_error)
    __pyx_v_self->thisptr1D->set_cook_noise(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":145
 * 
 *     def set_cook_noise(self, amplitude):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.set_cook_noise(amplitude)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":148
 *             self.thisptr1D.set_cook_noise(amplitude)
 *         elif self.dim == 2:
 *             self.thisptr2D.set_cook_noise(amplitude)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.set_cook_noise(amplitude)
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_amplitude); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 148, __pyx_L1_error)
    __pyx_v_self->thisptr2D->set_cook_noise(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":147
 *         if self.dim == 1:
 *             self.thisptr1D.set_cook_noise(amplitude)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.set_cook_noise(amplitude)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":150
 *             self.thisptr2D.set_cook_noise(amplitude)
 *         elif self.dim == 3:
 *             self.thisptr3D.set_cook_noise(amplitude)             # <<<<<<<<<<<<<<
 * 
 *     def save_noise_realization(self, fname, field):
 */
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_amplitude); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 150, __pyx_L1_error)
    __pyx_v_self->thisptr3D->set_cook_noise(__pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":149
 *         elif self.dim == 2:
 *             self.thisptr2D.set_cook_noise(amplitude)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.set_cook_noise(amplitude)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":144
 *         self.thisptr2D.build2D()
 * 
 *     def set_cook_noise(self, amplitude):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.set_cook_noise(amplitude)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.set_cook_noise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":152
 *             self.thisptr3D.set_cook_noise(amplitude)
 * 
 *     def save_noise_realization(self, fname, field):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_noise_realization(fname, field)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_33save_noise_realization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_33save_noise_realization(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_noise_realization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save_noise_realization", 1, 2, 2, 1); __PYX_ERR(11, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save_noise_realization") < 0)) __PYX_ERR(11, 152, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fname = values[0];
    __pyx_v_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_noise_realization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.save_noise_realization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_32save_noise_realization(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_fname, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_32save_noise_realization(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  unsigned int __pyx_t_2;
  __Pyx_RefNannySetupContext("save_noise_realization", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":153
 * 
 *     def save_noise_realization(self, fname, field):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_noise_realization(fname, field)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":154
 *     def save_noise_realization(self, fname, field):
 *         if self.dim == 1:
 *             self.thisptr1D.save_noise_realization(fname, field)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.save_noise_realization(fname, field)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 154, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_field); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 154, __pyx_L1_error)
    __pyx_v_self->thisptr1D->save_noise_realization(__pyx_t_1, __pyx_t_2);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":153
 * 
 *     def save_noise_realization(self, fname, field):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.save_noise_realization(fname, field)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":156
 *             self.thisptr1D.save_noise_realization(fname, field)
 *         elif self.dim == 2:
 *             self.thisptr2D.save_noise_realization(fname, field)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.save_noise_realization(fname, field)
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 156, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_field); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 156, __pyx_L1_error)
    __pyx_v_self->thisptr2D->save_noise_realization(__pyx_t_1, __pyx_t_2);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":155
 *         if self.dim == 1:
 *             self.thisptr1D.save_noise_realization(fname, field)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.save_noise_realization(fname, field)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":158
 *             self.thisptr2D.save_noise_realization(fname, field)
 *         elif self.dim == 3:
 *             self.thisptr3D.save_noise_realization(fname, field)             # <<<<<<<<<<<<<<
 * 
 *     def add_strain_model(self, PyKhachaturyan obj, field):
 */
    __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(11, 158, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_field); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(11, 158, __pyx_L1_error)
    __pyx_v_self->thisptr3D->save_noise_realization(__pyx_t_1, __pyx_t_2);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":157
 *         elif self.dim == 2:
 *             self.thisptr2D.save_noise_realization(fname, field)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.save_noise_realization(fname, field)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":152
 *             self.thisptr3D.set_cook_noise(amplitude)
 * 
 *     def save_noise_realization(self, fname, field):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.save_noise_realization(fname, field)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.save_noise_realization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pychgl_realspace.pyx":160
 *             self.thisptr3D.save_noise_realization(fname, field)
 * 
 *     def add_strain_model(self, PyKhachaturyan obj, field):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_35add_strain_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_35add_strain_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_obj = 0;
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_strain_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_strain_model", 1, 2, 2, 1); __PYX_ERR(11, 160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_strain_model") < 0)) __PYX_ERR(11, 160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_obj = ((struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *)values[0]);
    __pyx_v_field = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_strain_model", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.add_strain_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_14phasefield_cxx_PyKhachaturyan, 1, "obj", 0))) __PYX_ERR(11, 160, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_34add_strain_model(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), __pyx_v_obj, __pyx_v_field);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_34add_strain_model(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PyKhachaturyan *__pyx_v_obj, PyObject *__pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_strain_model", 0);

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":161
 * 
 *     def add_strain_model(self, PyKhachaturyan obj, field):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 2:
 */
  switch (__pyx_v_self->dim) {
    case 1:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":162
 *     def add_strain_model(self, PyKhachaturyan obj, field):
 *         if self.dim == 1:
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)             # <<<<<<<<<<<<<<
 *         elif self.dim == 2:
 *             self.thisptr2D.add_strain_model(deref(obj.thisptr), field)
 */
    __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_field); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 162, __pyx_L1_error)
    __pyx_v_self->thisptr1D->add_strain_model(((Khachaturyan)(*__pyx_v_obj->thisptr)), __pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":161
 * 
 *     def add_strain_model(self, PyKhachaturyan obj, field):
 *         if self.dim == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 2:
 */
    break;
    case 2:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":164
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 2:
 *             self.thisptr2D.add_strain_model(deref(obj.thisptr), field)             # <<<<<<<<<<<<<<
 *         elif self.dim == 3:
 *             self.thisptr3D.add_strain_model(deref(obj.thisptr), field)
 */
    __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_field); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 164, __pyx_L1_error)
    __pyx_v_self->thisptr2D->add_strain_model(((Khachaturyan)(*__pyx_v_obj->thisptr)), __pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":163
 *         if self.dim == 1:
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr2D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 3:
 */
    break;
    case 3:

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":166
 *             self.thisptr2D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 3:
 *             self.thisptr3D.add_strain_model(deref(obj.thisptr), field)             # <<<<<<<<<<<<<<
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_field); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 166, __pyx_L1_error)
    __pyx_v_self->thisptr3D->add_strain_model(((Khachaturyan)(*__pyx_v_obj->thisptr)), __pyx_t_1);

    /* "cemc/phasefield/cython/pychgl_realspace.pyx":165
 *         elif self.dim == 2:
 *             self.thisptr2D.add_strain_model(deref(obj.thisptr), field)
 *         elif self.dim == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr3D.add_strain_model(deref(obj.thisptr), field)
 * 
 */
    break;
    default: break;
  }

  /* "cemc/phasefield/cython/pychgl_realspace.pyx":160
 *             self.thisptr3D.save_noise_realization(fname, field)
 * 
 *     def add_strain_model(self, PyKhachaturyan obj, field):             # <<<<<<<<<<<<<<
 *         if self.dim == 1:
 *             self.thisptr1D.add_strain_model(deref(obj.thisptr), field)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.add_strain_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_36__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_38__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_15PyCHGLRealSpace_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyCHGLRealSpace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":7
 *     cdef SparseMatrix *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new SparseMatrix()
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_14PySparseMatrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_14PySparseMatrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix___cinit__(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_14PySparseMatrix___cinit__(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  SparseMatrix *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":8
 * 
 *     def __cinit__(self):
 *         self.thisptr = new SparseMatrix()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new SparseMatrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(12, 8, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":7
 *     cdef SparseMatrix *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new SparseMatrix()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":10
 *         self.thisptr = new SparseMatrix()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_14PySparseMatrix_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_14PySparseMatrix_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_14PySparseMatrix_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_14PySparseMatrix_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":11
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def insert(self, row, col, value):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":10
 *         self.thisptr = new SparseMatrix()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":13
 *         del self.thisptr
 * 
 *     def insert(self, row, col, value):             # <<<<<<<<<<<<<<
 *         self.thisptr.insert(row, col, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_5insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_5insert(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_row = 0;
  PyObject *__pyx_v_col = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,&__pyx_n_s_col,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert", 1, 3, 3, 1); __PYX_ERR(12, 13, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("insert", 1, 3, 3, 2); __PYX_ERR(12, 13, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert") < 0)) __PYX_ERR(12, 13, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_row = values[0];
    __pyx_v_col = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(12, 13, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_4insert(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self), __pyx_v_row, __pyx_v_col, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_4insert(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_row, PyObject *__pyx_v_col, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  unsigned int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":14
 * 
 *     def insert(self, row, col, value):
 *         self.thisptr.insert(row, col, value)             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, vec):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_row); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(12, 14, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_col); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(12, 14, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(12, 14, __pyx_L1_error)
  __pyx_v_self->thisptr->insert(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":13
 *         del self.thisptr
 * 
 *     def insert(self, row, col, value):             # <<<<<<<<<<<<<<
 *         self.thisptr.insert(row, col, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":16
 *         self.thisptr.insert(row, col, value)
 * 
 *     def dot(self, vec):             # <<<<<<<<<<<<<<
 *         # Transfer the arrays to C++ vectors
 *         cdef vector[double] v1
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_7dot(PyObject *__pyx_v_self, PyObject *__pyx_v_vec); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_7dot(PyObject *__pyx_v_self, PyObject *__pyx_v_vec) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_6dot(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self), ((PyObject *)__pyx_v_vec));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_6dot(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_vec) {
  std::vector<double>  __pyx_v_v1;
  std::vector<double>  __pyx_v_v2;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":21
 *         cdef vector[double] v2
 * 
 *         for i in range(len(vec)):             # <<<<<<<<<<<<<<
 *             v1.push_back(vec[i])
 *             v2.push_back(0.0)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vec); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(12, 21, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pysparse_matrix.pyx":22
 * 
 *         for i in range(len(vec)):
 *             v1.push_back(vec[i])             # <<<<<<<<<<<<<<
 *             v2.push_back(0.0)
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vec, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(12, 22, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_v1.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(12, 22, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pysparse_matrix.pyx":23
 *         for i in range(len(vec)):
 *             v1.push_back(vec[i])
 *             v2.push_back(0.0)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.dot(v1, v2)
 */
    try {
      __pyx_v_v2.push_back(0.0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(12, 23, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":25
 *             v2.push_back(0.0)
 * 
 *         self.thisptr.dot(v1, v2)             # <<<<<<<<<<<<<<
 * 
 *         # Transfer back
 */
  __pyx_v_self->thisptr->dot(__pyx_v_v1, __pyx_v_v2);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":28
 * 
 *         # Transfer back
 *         out = []             # <<<<<<<<<<<<<<
 *         for i in range(len(vec)):
 *             out.append(v2[i])
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_out = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":29
 *         # Transfer back
 *         out = []
 *         for i in range(len(vec)):             # <<<<<<<<<<<<<<
 *             out.append(v2[i])
 *         return out
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vec); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(12, 29, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pysparse_matrix.pyx":30
 *         out = []
 *         for i in range(len(vec)):
 *             out.append(v2[i])             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v2[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(12, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_out, __pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(12, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":31
 *         for i in range(len(vec)):
 *             out.append(v2[i])
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":16
 *         self.thisptr.insert(row, col, value)
 * 
 *     def dot(self, vec):             # <<<<<<<<<<<<<<
 *         # Transfer the arrays to C++ vectors
 *         cdef vector[double] v1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":33
 *         return out
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_9clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_8clear(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_8clear(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":34
 * 
 *     def clear(self):
 *         self.thisptr.clear()             # <<<<<<<<<<<<<<
 * 
 *     def save(self, fname):
 */
  __pyx_v_self->thisptr->clear();

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":33
 *         return out
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":36
 *         self.thisptr.clear()
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         self.thisptr.save(fname)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_11save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_11save(PyObject *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_10save(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self), ((PyObject *)__pyx_v_fname));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_10save(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("save", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":37
 * 
 *     def save(self, fname):
 *         self.thisptr.save(fname)             # <<<<<<<<<<<<<<
 * 
 *     def is_symmetric(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(12, 37, __pyx_L1_error)
  __pyx_v_self->thisptr->save(__pyx_t_1);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":36
 *         self.thisptr.clear()
 * 
 *     def save(self, fname):             # <<<<<<<<<<<<<<
 *         self.thisptr.save(fname)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":39
 *         self.thisptr.save(fname)
 * 
 *     def is_symmetric(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.is_symmetric()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_13is_symmetric(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_13is_symmetric(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_symmetric (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_12is_symmetric(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_12is_symmetric(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_symmetric", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":40
 * 
 *     def is_symmetric(self):
 *         return self.thisptr.is_symmetric()             # <<<<<<<<<<<<<<
 * 
 *     def to_csr(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->is_symmetric()); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":39
 *         self.thisptr.save(fname)
 * 
 *     def is_symmetric(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.is_symmetric()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.is_symmetric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pysparse_matrix.pyx":42
 *         return self.thisptr.is_symmetric()
 * 
 *     def to_csr(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.to_csr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_15to_csr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_15to_csr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_csr (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_14to_csr(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_14to_csr(struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_csr", 0);

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":43
 * 
 *     def to_csr(self):
 *         self.thisptr.to_csr()             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->thisptr->to_csr();

  /* "cemc/phasefield/cython/pysparse_matrix.pyx":42
 *         return self.thisptr.is_symmetric()
 * 
 *     def to_csr(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.to_csr()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_16__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_14PySparseMatrix_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_14PySparseMatrix_18__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_14PySparseMatrix_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PySparseMatrix.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyconjugate_gradient.pyx":8
 *     cdef ConjugateGradient *thisptr
 * 
 *     def __cinit__(self, tol):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ConjugateGradient(tol)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_19PyConjugateGradient_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_19PyConjugateGradient_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tol = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tol,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(13, 8, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_tol = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(13, 8, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_19PyConjugateGradient___cinit__(((struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *)__pyx_v_self), __pyx_v_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_19PyConjugateGradient___cinit__(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":9
 * 
 *     def __cinit__(self, tol):
 *         self.thisptr = new ConjugateGradient(tol)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(13, 9, __pyx_L1_error)
  __pyx_v_self->thisptr = new ConjugateGradient(__pyx_t_1);

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":8
 *     cdef ConjugateGradient *thisptr
 * 
 *     def __cinit__(self, tol):             # <<<<<<<<<<<<<<
 *         self.thisptr = new ConjugateGradient(tol)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyconjugate_gradient.pyx":11
 *         self.thisptr = new ConjugateGradient(tol)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_19PyConjugateGradient_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_19PyConjugateGradient_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_19PyConjugateGradient_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_19PyConjugateGradient_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":12
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def solve(self, PySparseMatrix sp_mat, rhs, res):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":11
 *         self.thisptr = new ConjugateGradient(tol)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pyconjugate_gradient.pyx":14
 *         del self.thisptr
 * 
 *     def solve(self, PySparseMatrix sp_mat, rhs, res):             # <<<<<<<<<<<<<<
 *         cdef vector[double] rhs_vec
 *         cdef vector[double] res_vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_5solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_5solve(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_sp_mat = 0;
  PyObject *__pyx_v_rhs = 0;
  PyObject *__pyx_v_res = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sp_mat,&__pyx_n_s_rhs,&__pyx_n_s_res,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sp_mat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rhs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, 1); __PYX_ERR(13, 14, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_res)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, 2); __PYX_ERR(13, 14, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve") < 0)) __PYX_ERR(13, 14, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sp_mat = ((struct __pyx_obj_14phasefield_cxx_PySparseMatrix *)values[0]);
    __pyx_v_rhs = values[1];
    __pyx_v_res = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(13, 14, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sp_mat), __pyx_ptype_14phasefield_cxx_PySparseMatrix, 1, "sp_mat", 0))) __PYX_ERR(13, 14, __pyx_L1_error)
  __pyx_r = __pyx_pf_14phasefield_cxx_19PyConjugateGradient_4solve(((struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *)__pyx_v_self), __pyx_v_sp_mat, __pyx_v_rhs, __pyx_v_res);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_4solve(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, struct __pyx_obj_14phasefield_cxx_PySparseMatrix *__pyx_v_sp_mat, PyObject *__pyx_v_rhs, PyObject *__pyx_v_res) {
  std::vector<double>  __pyx_v_rhs_vec;
  std::vector<double>  __pyx_v_res_vec;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":18
 *         cdef vector[double] res_vec
 * 
 *         for i in range(len(rhs)):             # <<<<<<<<<<<<<<
 *             rhs_vec.push_back(rhs[i])
 *             res_vec.push_back(res[i])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_rhs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(13, 18, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":19
 * 
 *         for i in range(len(rhs)):
 *             rhs_vec.push_back(rhs[i])             # <<<<<<<<<<<<<<
 *             res_vec.push_back(res[i])
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_rhs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(13, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(13, 19, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_rhs_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(13, 19, __pyx_L1_error)
    }

    /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":20
 *         for i in range(len(rhs)):
 *             rhs_vec.push_back(rhs[i])
 *             res_vec.push_back(res[i])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.solve(deref(sp_mat.thisptr), rhs_vec, res_vec)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_res, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(13, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(13, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_res_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(13, 20, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":22
 *             res_vec.push_back(res[i])
 * 
 *         self.thisptr.solve(deref(sp_mat.thisptr), rhs_vec, res_vec)             # <<<<<<<<<<<<<<
 * 
 *         # Transfer back
 */
  try {
    __pyx_v_self->thisptr->solve(((SparseMatrix &)(*__pyx_v_sp_mat->thisptr)), __pyx_v_rhs_vec, __pyx_v_res_vec);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(13, 22, __pyx_L1_error)
  }

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":25
 * 
 *         # Transfer back
 *         for i in range(len(rhs)):             # <<<<<<<<<<<<<<
 *             res[i] = res_vec[i]
 *         return res
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_rhs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(13, 25, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":26
 *         # Transfer back
 *         for i in range(len(rhs)):
 *             res[i] = res_vec[i]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_res_vec[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(13, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_res, __pyx_v_i, __pyx_t_4, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(13, 26, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":27
 *         for i in range(len(rhs)):
 *             res[i] = res_vec[i]
 *         return res             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyconjugate_gradient.pyx":14
 *         del self.thisptr
 * 
 *     def solve(self, PySparseMatrix sp_mat, rhs, res):             # <<<<<<<<<<<<<<
 *         cdef vector[double] rhs_vec
 *         cdef vector[double] res_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_19PyConjugateGradient_6__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_19PyConjugateGradient_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_19PyConjugateGradient_8__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_19PyConjugateGradient_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyConjugateGradient *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyConjugateGradient.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":8
 *     cdef AdaptiveTimeStepLogger *thisptr
 * 
 *     def __cinit__(self, fname):             # <<<<<<<<<<<<<<
 *         self.thisptr = new AdaptiveTimeStepLogger(fname)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(14, 8, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fname = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(14, 8, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger___cinit__(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self), __pyx_v_fname);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger___cinit__(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, PyObject *__pyx_v_fname) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":9
 * 
 *     def __cinit__(self, fname):
 *         self.thisptr = new AdaptiveTimeStepLogger(fname)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname); if (unlikely(PyErr_Occurred())) __PYX_ERR(14, 9, __pyx_L1_error)
  __pyx_v_self->thisptr = new AdaptiveTimeStepLogger(__pyx_t_1);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":8
 *     cdef AdaptiveTimeStepLogger *thisptr
 * 
 *     def __cinit__(self, fname):             # <<<<<<<<<<<<<<
 *         self.thisptr = new AdaptiveTimeStepLogger(fname)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":11
 *         self.thisptr = new AdaptiveTimeStepLogger(fname)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_2__dealloc__(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_2__dealloc__(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":12
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def log(self, iter, time):
 */
  delete __pyx_v_self->thisptr;

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":11
 *         self.thisptr = new AdaptiveTimeStepLogger(fname)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":14
 *         del self.thisptr
 * 
 *     def log(self, iter, time):             # <<<<<<<<<<<<<<
 *         self.thisptr.log(iter, time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_5log(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_5log(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iter = 0;
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iter,&__pyx_n_s_time,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iter)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, 1); __PYX_ERR(14, 14, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log") < 0)) __PYX_ERR(14, 14, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_iter = values[0];
    __pyx_v_time = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(14, 14, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_4log(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self), __pyx_v_iter, __pyx_v_time);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_4log(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, PyObject *__pyx_v_iter, PyObject *__pyx_v_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  double __pyx_t_2;
  __Pyx_RefNannySetupContext("log", 0);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":15
 * 
 *     def log(self, iter, time):
 *         self.thisptr.log(iter, time)             # <<<<<<<<<<<<<<
 * 
 *     def getLast(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_iter); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(14, 15, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_time); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(14, 15, __pyx_L1_error)
  __pyx_v_self->thisptr->log(__pyx_t_1, __pyx_t_2);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":14
 *         del self.thisptr
 * 
 *     def log(self, iter, time):             # <<<<<<<<<<<<<<
 *         self.thisptr.log(iter, time)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":17
 *         self.thisptr.log(iter, time)
 * 
 *     def getLast(self):             # <<<<<<<<<<<<<<
 *         cdef LogFileEntry entry = self.thisptr.getLast()
 *         return {"time": entry.time, "iter": entry.iter}
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_7getLast(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_7getLast(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLast (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_6getLast(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_6getLast(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self) {
  struct LogFileEntry __pyx_v_entry;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getLast", 0);

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":18
 * 
 *     def getLast(self):
 *         cdef LogFileEntry entry = self.thisptr.getLast()             # <<<<<<<<<<<<<<
 *         return {"time": entry.time, "iter": entry.iter}
 */
  __pyx_v_entry = __pyx_v_self->thisptr->getLast();

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":19
 *     def getLast(self):
 *         cdef LogFileEntry entry = self.thisptr.getLast()
 *         return {"time": entry.time, "iter": entry.iter}             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_entry.time); if (unlikely(!__pyx_t_2)) __PYX_ERR(14, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(14, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_entry.iter); if (unlikely(!__pyx_t_2)) __PYX_ERR(14, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_iter, __pyx_t_2) < 0) __PYX_ERR(14, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/pyadaptive_timestep_logger.pyx":17
 *         self.thisptr.log(iter, time)
 * 
 *     def getLast(self):             # <<<<<<<<<<<<<<
 *         cdef LogFileEntry entry = self.thisptr.getLast()
 *         return {"time": entry.time, "iter": entry.iter}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.getLast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_8__reduce_cython__(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_10__setstate_cython__(((struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_24PyAdaptiveTimeStepLogger_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.PyAdaptiveTimeStepLogger.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":9
 * 
 * 
 * def pytest_functional_derivative(elastic, misfit, field):             # <<<<<<<<<<<<<<
 *     cdef vector[double] c_vec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_1pytest_functional_derivative(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14phasefield_cxx_1pytest_functional_derivative = {"pytest_functional_derivative", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_1pytest_functional_derivative, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14phasefield_cxx_1pytest_functional_derivative(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_elastic = 0;
  PyObject *__pyx_v_misfit = 0;
  PyObject *__pyx_v_field = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pytest_functional_derivative (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_elastic,&__pyx_n_s_misfit,&__pyx_n_s_field,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_elastic)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_misfit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_functional_derivative", 1, 3, 3, 1); __PYX_ERR(15, 9, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_functional_derivative", 1, 3, 3, 2); __PYX_ERR(15, 9, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pytest_functional_derivative") < 0)) __PYX_ERR(15, 9, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_elastic = values[0];
    __pyx_v_misfit = values[1];
    __pyx_v_field = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pytest_functional_derivative", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(15, 9, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.pytest_functional_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_pytest_functional_derivative(__pyx_self, __pyx_v_elastic, __pyx_v_misfit, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_pytest_functional_derivative(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_elastic, PyObject *__pyx_v_misfit, PyObject *__pyx_v_field) {
  std::vector<double>  __pyx_v_c_vec;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("pytest_functional_derivative", 0);

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":12
 *     cdef vector[double] c_vec
 * 
 *     for i in range(len(field)):             # <<<<<<<<<<<<<<
 *         c_vec.push_back(field[i])
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_field); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(15, 12, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":13
 * 
 *     for i in range(len(field)):
 *         c_vec.push_back(field[i])             # <<<<<<<<<<<<<<
 * 
 *     return test_functional_derivative(elastic, misfit, c_vec)
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_field, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(15, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(15, 13, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_v_c_vec.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(15, 13, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":15
 *         c_vec.push_back(field[i])
 * 
 *     return test_functional_derivative(elastic, misfit, c_vec)             # <<<<<<<<<<<<<<
 * 
 * def pytest_contract_tensors(t1, t2):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = test_functional_derivative(__pyx_v_elastic, __pyx_v_misfit, __pyx_v_c_vec);
    if (unlikely(!__pyx_t_4)) __PYX_ERR(15, 15, __pyx_L1_error)
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(15, 15, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":9
 * 
 * 
 * def pytest_functional_derivative(elastic, misfit, field):             # <<<<<<<<<<<<<<
 *     cdef vector[double] c_vec
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("phasefield_cxx.pytest_functional_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":17
 *     return test_functional_derivative(elastic, misfit, c_vec)
 * 
 * def pytest_contract_tensors(t1, t2):             # <<<<<<<<<<<<<<
 *     return test_contract_tensors(t1, t2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_3pytest_contract_tensors(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14phasefield_cxx_3pytest_contract_tensors = {"pytest_contract_tensors", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_3pytest_contract_tensors, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14phasefield_cxx_3pytest_contract_tensors(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_t1 = 0;
  PyObject *__pyx_v_t2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pytest_contract_tensors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t1,&__pyx_n_s_t2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_contract_tensors", 1, 2, 2, 1); __PYX_ERR(15, 17, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pytest_contract_tensors") < 0)) __PYX_ERR(15, 17, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t1 = values[0];
    __pyx_v_t2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pytest_contract_tensors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(15, 17, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.pytest_contract_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_2pytest_contract_tensors(__pyx_self, __pyx_v_t1, __pyx_v_t2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_2pytest_contract_tensors(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t1, PyObject *__pyx_v_t2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("pytest_contract_tensors", 0);

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":18
 * 
 * def pytest_contract_tensors(t1, t2):
 *     return test_contract_tensors(t1, t2)             # <<<<<<<<<<<<<<
 * 
 * def pytest_B_tensor_element(dir, gf, t1, t2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = test_contract_tensors(__pyx_v_t1, __pyx_v_t2); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":17
 *     return test_functional_derivative(elastic, misfit, c_vec)
 * 
 * def pytest_contract_tensors(t1, t2):             # <<<<<<<<<<<<<<
 *     return test_contract_tensors(t1, t2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("phasefield_cxx.pytest_contract_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":20
 *     return test_contract_tensors(t1, t2)
 * 
 * def pytest_B_tensor_element(dir, gf, t1, t2):             # <<<<<<<<<<<<<<
 *     cdef vector[double] v
 *     for i in range(3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14phasefield_cxx_5pytest_B_tensor_element(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14phasefield_cxx_5pytest_B_tensor_element = {"pytest_B_tensor_element", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_5pytest_B_tensor_element, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14phasefield_cxx_5pytest_B_tensor_element(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dir = 0;
  PyObject *__pyx_v_gf = 0;
  PyObject *__pyx_v_t1 = 0;
  PyObject *__pyx_v_t2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pytest_B_tensor_element (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dir,&__pyx_n_s_gf,&__pyx_n_s_t1,&__pyx_n_s_t2,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dir)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_B_tensor_element", 1, 4, 4, 1); __PYX_ERR(15, 20, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_B_tensor_element", 1, 4, 4, 2); __PYX_ERR(15, 20, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pytest_B_tensor_element", 1, 4, 4, 3); __PYX_ERR(15, 20, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pytest_B_tensor_element") < 0)) __PYX_ERR(15, 20, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_dir = values[0];
    __pyx_v_gf = values[1];
    __pyx_v_t1 = values[2];
    __pyx_v_t2 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pytest_B_tensor_element", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(15, 20, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("phasefield_cxx.pytest_B_tensor_element", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14phasefield_cxx_4pytest_B_tensor_element(__pyx_self, __pyx_v_dir, __pyx_v_gf, __pyx_v_t1, __pyx_v_t2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14phasefield_cxx_4pytest_B_tensor_element(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dir, PyObject *__pyx_v_gf, PyObject *__pyx_v_t1, PyObject *__pyx_v_t2) {
  std::vector<double>  __pyx_v_v;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("pytest_B_tensor_element", 0);

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":22
 * def pytest_B_tensor_element(dir, gf, t1, t2):
 *     cdef vector[double] v
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         v.push_back(dir[i])
 *     return test_B_tensor_element(v, gf, t1, t2)
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":23
 *     cdef vector[double] v
 *     for i in range(3):
 *         v.push_back(dir[i])             # <<<<<<<<<<<<<<
 *     return test_B_tensor_element(v, gf, t1, t2)
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_dir, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(15, 23, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    try {
      __pyx_v_v.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(15, 23, __pyx_L1_error)
    }
  }

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":24
 *     for i in range(3):
 *         v.push_back(dir[i])
 *     return test_B_tensor_element(v, gf, t1, t2)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = test_B_tensor_element(__pyx_v_v, __pyx_v_gf, __pyx_v_t1, __pyx_v_t2); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":20
 *     return test_contract_tensors(t1, t2)
 * 
 * def pytest_B_tensor_element(dir, gf, t1, t2):             # <<<<<<<<<<<<<<
 *     cdef vector[double] v
 *     for i in range(3):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("phasefield_cxx.pytest_B_tensor_element", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(16, 272, __pyx_L1_error)

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(16, 276, __pyx_L1_error)

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(16, 306, __pyx_L1_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(16, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(16, 325, __pyx_L1_error)
      break;
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(16, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(16, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(16, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(16, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(16, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(16, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(16, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(16, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(16, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(16, 856, __pyx_L1_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(16, 860, __pyx_L1_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(16, 880, __pyx_L1_error)

        /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(16, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(16, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(16, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(16, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(16, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(16, 1036, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(16, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(16, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(16, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(16, 1042, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(16, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(16, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(16, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(16, 1048, __pyx_L3_error)

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(16, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(16, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(16, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_14phasefield_cxx_PyRegressionKernel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyRegressionKernel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyRegressionKernel[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_18PyRegressionKernel_1evaluate, METH_O, 0},
  {"deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_18PyRegressionKernel_3deriv, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_18PyRegressionKernel_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_18PyRegressionKernel_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyRegressionKernel = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyRegressionKernel", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyRegressionKernel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyRegressionKernel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyRegressionKernel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyRegressionKernel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyQuadraticKernel(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14phasefield_cxx_PyRegressionKernel(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyQuadraticKernel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_17PyQuadraticKernel_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_14phasefield_cxx_PyRegressionKernel(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyQuadraticKernel[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_5evaluate, METH_O, 0},
  {"deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_7deriv, METH_O, 0},
  {"to_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_9to_dict, METH_NOARGS, 0},
  {"from_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_11from_dict, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyQuadraticKernel_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyQuadraticKernel = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyQuadraticKernel", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyQuadraticKernel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyQuadraticKernel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyQuadraticKernel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyQuadraticKernel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyGaussianKernel(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14phasefield_cxx_PyRegressionKernel(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_16PyGaussianKernel_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyGaussianKernel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_16PyGaussianKernel_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_14phasefield_cxx_PyRegressionKernel(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyGaussianKernel[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_5evaluate, METH_O, 0},
  {"deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_7deriv, METH_O, 0},
  {"to_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_9to_dict, METH_NOARGS, 0},
  {"from_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_11from_dict, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyGaussianKernel_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyGaussianKernel = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyGaussianKernel", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyGaussianKernel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyGaussianKernel, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyGaussianKernel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyGaussianKernel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyKernelRegressor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_17PyKernelRegressor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyKernelRegressor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_17PyKernelRegressor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyKernelRegressor[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_5evaluate, METH_O, 0},
  {"deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_7deriv, METH_O, 0},
  {"set_kernel", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_9set_kernel, METH_O, 0},
  {"evaluate_kernel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_11evaluate_kernel, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_coeff", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_13set_coeff, METH_O, 0},
  {"to_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_15to_dict, METH_NOARGS, 0},
  {"from_dict", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_17from_dict, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_17PyKernelRegressor_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyKernelRegressor = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyKernelRegressor", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyKernelRegressor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyKernelRegressor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyKernelRegressor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyKernelRegressor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyMat4D(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_7PyMat4D_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyMat4D(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_7PyMat4D_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyMat4D[] = {
  {"from_numpy", (PyCFunction)__pyx_pw_14phasefield_cxx_7PyMat4D_5from_numpy, METH_O, 0},
  {"to_numpy", (PyCFunction)__pyx_pw_14phasefield_cxx_7PyMat4D_7to_numpy, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_7PyMat4D_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_7PyMat4D_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyMat4D = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyMat4D", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyMat4D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyMat4D, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyMat4D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyMat4D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyKhachaturyan(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_14PyKhachaturyan_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyKhachaturyan(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_14PyKhachaturyan_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyKhachaturyan[] = {
  {"green_function", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_5green_function, METH_O, 0},
  {"wave_vector", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_7wave_vector, METH_VARARGS|METH_KEYWORDS, 0},
  {"zeroth_order_integral", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_9zeroth_order_integral, METH_O, 0},
  {"effective_stress", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_11effective_stress, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyKhachaturyan_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyKhachaturyan = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyKhachaturyan", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyKhachaturyan), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyKhachaturyan, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyKhachaturyan, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyKhachaturyan, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyTwoPhaseLandau(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyTwoPhaseLandau(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyTwoPhaseLandau[] = {
  {"evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_3evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_kernel_regressor", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_5set_kernel_regressor, METH_O, 0},
  {"set_polynomial", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_7set_polynomial, METH_O, 0},
  {"set_discontinuity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_9set_discontinuity, METH_VARARGS|METH_KEYWORDS, 0},
  {"partial_deriv_conc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_11partial_deriv_conc, METH_VARARGS|METH_KEYWORDS, 0},
  {"partial_deriv_shape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_13partial_deriv_shape, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyTwoPhaseLandau_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyTwoPhaseLandau = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyTwoPhaseLandau", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyTwoPhaseLandau), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyTwoPhaseLandau, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyTwoPhaseLandau, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyTwoPhaseLandau, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyCahnHilliard(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_14PyCahnHilliard_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyCahnHilliard(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_14PyCahnHilliard_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyCahnHilliard[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_7evaluate, METH_O, 0},
  {"deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_9deriv, METH_O, 0},
  {"regularization", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_11regularization, METH_O, 0},
  {"regularization_deriv", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_13regularization_deriv, METH_O, 0},
  {"set_bounds", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_15set_bounds, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_penalty", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_17set_penalty, METH_O, 0},
  {"set_range_scale", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_19set_range_scale, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PyCahnHilliard_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyCahnHilliard = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyCahnHilliard", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyCahnHilliard), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyCahnHilliard, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyCahnHilliard, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14phasefield_cxx_14PyCahnHilliard_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyCahnHilliard, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyCahnHilliardPhaseField(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyCahnHilliardPhaseField(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyCahnHilliardPhaseField[] = {
  {"run", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_7run, METH_VARARGS|METH_KEYWORDS, 0},
  {"random_initialization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_9random_initialization, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_file", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_11from_file, METH_O, 0},
  {"from_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_13from_npy_array, METH_O, 0},
  {"to_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_15to_npy_array, METH_NOARGS, 0},
  {"set_adaptive", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_17set_adaptive, METH_VARARGS|METH_KEYWORDS, 0},
  {"build2D", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_19build2D, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyCahnHilliardPhaseField", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyCahnHilliardPhaseField), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyCahnHilliardPhaseField, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyCahnHilliardPhaseField, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14phasefield_cxx_24PyCahnHilliardPhaseField_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyCahnHilliardPhaseField, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyPolynomialTerm(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyPolynomialTerm(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_16PyPolynomialTerm_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyPolynomialTerm[] = {
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_5evaluate, METH_O, 0},
  {"deriv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_7deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_16PyPolynomialTerm_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyPolynomialTerm = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyPolynomialTerm", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyPolynomialTerm), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyPolynomialTerm, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyPolynomialTerm, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyPolynomialTerm, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyPolynomial(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_12PyPolynomial_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyPolynomial(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_12PyPolynomial_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyPolynomial[] = {
  {"add_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_12PyPolynomial_5add_term, METH_VARARGS|METH_KEYWORDS, 0},
  {"evaluate", (PyCFunction)__pyx_pw_14phasefield_cxx_12PyPolynomial_7evaluate, METH_O, 0},
  {"deriv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_12PyPolynomial_9deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_12PyPolynomial_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_12PyPolynomial_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyPolynomial = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyPolynomial", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyPolynomial), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyPolynomial, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyPolynomial, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyPolynomial, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyCHGL(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_6PyCHGL_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyCHGL(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_6PyCHGL_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyCHGL[] = {
  {"run", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_6PyCHGL_7run, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_file", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_9from_file, METH_O, 0},
  {"random_initialization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_6PyCHGL_11random_initialization, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_13from_npy_array, METH_O, 0},
  {"to_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_15to_npy_array, METH_NOARGS, 0},
  {"set_free_energy", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_17set_free_energy, METH_O, 0},
  {"print_polynomial", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_19print_polynomial, METH_NOARGS, 0},
  {"save_free_energy_map", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_21save_free_energy_map, METH_O, 0},
  {"use_HeLiuTang_stabilizer", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_23use_HeLiuTang_stabilizer, METH_O, 0},
  {"use_adaptive_stepping", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_6PyCHGL_25use_adaptive_stepping, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_filter", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_27set_filter, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_6PyCHGL_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyCHGL = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyCHGL", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyCHGL), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyCHGL, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyCHGL, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14phasefield_cxx_6PyCHGL_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyCHGL, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyCHGLRealSpace(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyCHGLRealSpace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyCHGLRealSpace[] = {
  {"run", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_7run, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_file", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_9from_file, METH_O, 0},
  {"random_initialization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_11random_initialization, METH_VARARGS|METH_KEYWORDS, 0},
  {"from_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_13from_npy_array, METH_O, 0},
  {"to_npy_array", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_15to_npy_array, METH_NOARGS, 0},
  {"set_free_energy", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_17set_free_energy, METH_O, 0},
  {"print_polynomial", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_19print_polynomial, METH_NOARGS, 0},
  {"save_free_energy_map", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_21save_free_energy_map, METH_O, 0},
  {"use_HeLiuTang_stabilizer", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_23use_HeLiuTang_stabilizer, METH_O, 0},
  {"use_adaptive_stepping", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_25use_adaptive_stepping, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_filter", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_27set_filter, METH_O, 0},
  {"build2D", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_29build2D, METH_NOARGS, 0},
  {"set_cook_noise", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_31set_cook_noise, METH_O, 0},
  {"save_noise_realization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_33save_noise_realization, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_strain_model", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_35add_strain_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyCHGLRealSpace = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyCHGLRealSpace", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyCHGLRealSpace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyCHGLRealSpace, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyCHGLRealSpace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14phasefield_cxx_15PyCHGLRealSpace_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyCHGLRealSpace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PySparseMatrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_14PySparseMatrix_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PySparseMatrix(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_14PySparseMatrix_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PySparseMatrix[] = {
  {"insert", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_14PySparseMatrix_5insert, METH_VARARGS|METH_KEYWORDS, 0},
  {"dot", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_7dot, METH_O, 0},
  {"clear", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_9clear, METH_NOARGS, 0},
  {"save", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_11save, METH_O, 0},
  {"is_symmetric", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_13is_symmetric, METH_NOARGS, 0},
  {"to_csr", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_15to_csr, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_14PySparseMatrix_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PySparseMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PySparseMatrix", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PySparseMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PySparseMatrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PySparseMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PySparseMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyConjugateGradient(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_19PyConjugateGradient_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyConjugateGradient(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_19PyConjugateGradient_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyConjugateGradient[] = {
  {"solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_19PyConjugateGradient_5solve, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_19PyConjugateGradient_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_19PyConjugateGradient_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyConjugateGradient = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyConjugateGradient", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyConjugateGradient), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyConjugateGradient, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyConjugateGradient, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyConjugateGradient, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_14phasefield_cxx_PyAdaptiveTimeStepLogger(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14phasefield_cxx_PyAdaptiveTimeStepLogger(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14phasefield_cxx_PyAdaptiveTimeStepLogger[] = {
  {"log", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_5log, METH_VARARGS|METH_KEYWORDS, 0},
  {"getLast", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_7getLast, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14phasefield_cxx_24PyAdaptiveTimeStepLogger_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger = {
  PyVarObject_HEAD_INIT(0, 0)
  "phasefield_cxx.PyAdaptiveTimeStepLogger", /*tp_name*/
  sizeof(struct __pyx_obj_14phasefield_cxx_PyAdaptiveTimeStepLogger), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14phasefield_cxx_PyAdaptiveTimeStepLogger, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14phasefield_cxx_PyAdaptiveTimeStepLogger, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14phasefield_cxx_PyAdaptiveTimeStepLogger, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_phasefield_cxx(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_phasefield_cxx},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "phasefield_cxx",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Dimension_has_to_be_1_2_or_3, __pyx_k_Dimension_has_to_be_1_2_or_3, sizeof(__pyx_k_Dimension_has_to_be_1_2_or_3), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Has_to_be_implemented_in_derived, __pyx_k_Has_to_be_implemented_in_derived, sizeof(__pyx_k_Has_to_be_implemented_in_derived), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PyAdaptiveTimeStepLogger, __pyx_k_PyAdaptiveTimeStepLogger, sizeof(__pyx_k_PyAdaptiveTimeStepLogger), 0, 0, 1, 1},
  {&__pyx_n_s_PyCHGL, __pyx_k_PyCHGL, sizeof(__pyx_k_PyCHGL), 0, 0, 1, 1},
  {&__pyx_n_s_PyCHGLRealSpace, __pyx_k_PyCHGLRealSpace, sizeof(__pyx_k_PyCHGLRealSpace), 0, 0, 1, 1},
  {&__pyx_n_s_PyCahnHilliard, __pyx_k_PyCahnHilliard, sizeof(__pyx_k_PyCahnHilliard), 0, 0, 1, 1},
  {&__pyx_n_s_PyCahnHilliardPhaseField, __pyx_k_PyCahnHilliardPhaseField, sizeof(__pyx_k_PyCahnHilliardPhaseField), 0, 0, 1, 1},
  {&__pyx_n_s_PyConjugateGradient, __pyx_k_PyConjugateGradient, sizeof(__pyx_k_PyConjugateGradient), 0, 0, 1, 1},
  {&__pyx_n_s_PyGaussianKernel, __pyx_k_PyGaussianKernel, sizeof(__pyx_k_PyGaussianKernel), 0, 0, 1, 1},
  {&__pyx_n_s_PyKernelRegressor, __pyx_k_PyKernelRegressor, sizeof(__pyx_k_PyKernelRegressor), 0, 0, 1, 1},
  {&__pyx_n_s_PyKhachaturyan, __pyx_k_PyKhachaturyan, sizeof(__pyx_k_PyKhachaturyan), 0, 0, 1, 1},
  {&__pyx_n_s_PyMat4D, __pyx_k_PyMat4D, sizeof(__pyx_k_PyMat4D), 0, 0, 1, 1},
  {&__pyx_n_s_PyPolynomial, __pyx_k_PyPolynomial, sizeof(__pyx_k_PyPolynomial), 0, 0, 1, 1},
  {&__pyx_n_s_PyPolynomialTerm, __pyx_k_PyPolynomialTerm, sizeof(__pyx_k_PyPolynomialTerm), 0, 0, 1, 1},
  {&__pyx_n_s_PyQuadraticKernel, __pyx_k_PyQuadraticKernel, sizeof(__pyx_k_PyQuadraticKernel), 0, 0, 1, 1},
  {&__pyx_n_s_PyRegressionKernel, __pyx_k_PyRegressionKernel, sizeof(__pyx_k_PyRegressionKernel), 0, 0, 1, 1},
  {&__pyx_n_s_PySparseMatrix, __pyx_k_PySparseMatrix, sizeof(__pyx_k_PySparseMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_PyTwoPhaseLandau, __pyx_k_PyTwoPhaseLandau, sizeof(__pyx_k_PyTwoPhaseLandau), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_The_direction_has_to_be_between, __pyx_k_The_direction_has_to_be_between, sizeof(__pyx_k_The_direction_has_to_be_between), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s_We_only_support_up_to_10_dimensi, __pyx_k_We_only_support_up_to_10_dimensi, sizeof(__pyx_k_We_only_support_up_to_10_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_c_vec, __pyx_k_c_vec, sizeof(__pyx_k_c_vec), 0, 0, 1, 1},
  {&__pyx_kp_s_cemc_phasefield_cython_test_mult, __pyx_k_cemc_phasefield_cython_test_mult, sizeof(__pyx_k_cemc_phasefield_cython_test_mult), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coeff, __pyx_k_coeff, sizeof(__pyx_k_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_col, __pyx_k_col, sizeof(__pyx_k_col), 0, 0, 1, 1},
  {&__pyx_n_s_conc, __pyx_k_conc, sizeof(__pyx_k_conc), 0, 0, 1, 1},
  {&__pyx_n_s_crd, __pyx_k_crd, sizeof(__pyx_k_crd), 0, 0, 1, 1},
  {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
  {&__pyx_kp_s_dim_has_to_be_one_1_2_or_3, __pyx_k_dim_has_to_be_one_1_2_or_3, sizeof(__pyx_k_dim_has_to_be_one_1_2_or_3), 0, 0, 1, 0},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_elastic, __pyx_k_elastic, sizeof(__pyx_k_elastic), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_free_eng, __pyx_k_free_eng, sizeof(__pyx_k_free_eng), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gf, __pyx_k_gf, sizeof(__pyx_k_gf), 0, 0, 1, 1},
  {&__pyx_n_s_gl_damping, __pyx_k_gl_damping, sizeof(__pyx_k_gl_damping), 0, 0, 1, 1},
  {&__pyx_n_s_gradient_coeff, __pyx_k_gradient_coeff, sizeof(__pyx_k_gradient_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_increase_every_update, __pyx_k_increase_every_update, sizeof(__pyx_k_increase_every_update), 0, 0, 1, 1},
  {&__pyx_n_s_increment, __pyx_k_increment, sizeof(__pyx_k_increment), 0, 0, 1, 1},
  {&__pyx_n_s_indx, __pyx_k_indx, sizeof(__pyx_k_indx), 0, 0, 1, 1},
  {&__pyx_n_s_inner_power, __pyx_k_inner_power, sizeof(__pyx_k_inner_power), 0, 0, 1, 1},
  {&__pyx_n_s_isscalar, __pyx_k_isscalar, sizeof(__pyx_k_isscalar), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_jump, __pyx_k_jump, sizeof(__pyx_k_jump), 0, 0, 1, 1},
  {&__pyx_n_s_low_en_cut, __pyx_k_low_en_cut, sizeof(__pyx_k_low_en_cut), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_change, __pyx_k_max_change, sizeof(__pyx_k_max_change), 0, 0, 1, 1},
  {&__pyx_n_s_min_dt, __pyx_k_min_dt, sizeof(__pyx_k_min_dt), 0, 0, 1, 1},
  {&__pyx_n_s_min_step, __pyx_k_min_step, sizeof(__pyx_k_min_step), 0, 0, 1, 1},
  {&__pyx_n_s_misfit, __pyx_k_misfit, sizeof(__pyx_k_misfit), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_new_term, __pyx_k_new_term, sizeof(__pyx_k_new_term), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nsteps, __pyx_k_nsteps, sizeof(__pyx_k_nsteps), 0, 0, 1, 1},
  {&__pyx_n_s_num_gl_fields, __pyx_k_num_gl_fields, sizeof(__pyx_k_num_gl_fields), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_penalty, __pyx_k_penalty, sizeof(__pyx_k_penalty), 0, 0, 1, 1},
  {&__pyx_n_s_phasefield_cxx, __pyx_k_phasefield_cxx, sizeof(__pyx_k_phasefield_cxx), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_pytest_B_tensor_element, __pyx_k_pytest_B_tensor_element, sizeof(__pyx_k_pytest_B_tensor_element), 0, 0, 1, 1},
  {&__pyx_n_s_pytest_contract_tensors, __pyx_k_pytest_contract_tensors, sizeof(__pyx_k_pytest_contract_tensors), 0, 0, 1, 1},
  {&__pyx_n_s_pytest_functional_derivative, __pyx_k_pytest_functional_derivative, sizeof(__pyx_k_pytest_functional_derivative), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_range_scale, __pyx_k_range_scale, sizeof(__pyx_k_range_scale), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_rhs, __pyx_k_rhs, sizeof(__pyx_k_rhs), 0, 0, 1, 1},
  {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_kp_s_self_thisptr_cannot_be_converted, __pyx_k_self_thisptr_cannot_be_converted, sizeof(__pyx_k_self_thisptr_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sp_mat, __pyx_k_sp_mat, sizeof(__pyx_k_sp_mat), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_std_dev, __pyx_k_std_dev, sizeof(__pyx_k_std_dev), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thisptr3, __pyx_k_thisptr3, sizeof(__pyx_k_thisptr3), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xmax, __pyx_k_xmax, sizeof(__pyx_k_xmax), 0, 0, 1, 1},
  {&__pyx_n_s_xmin, __pyx_k_xmin, sizeof(__pyx_k_xmin), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 20, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(3, 40, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(16, 856, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(16, 1038, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cemc/phasefield/cython/pyquadtratic_kernel.pyx":11
 * 
 *     def evaluate(self, x):
 *         raise NotImplementedError("Has to be implemented in derived classes!")             # <<<<<<<<<<<<<<
 * 
 *     def deriv(self, x):
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Has_to_be_implemented_in_derived); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.thisptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_thisptr_cannot_be_converted); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cemc/phasefield/cython/khachaturyan.pyx":40
 *         self.thisptr.effective_stress(e_stress)
 * 
 *         stress = np.zeros((3, 3))             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             for j in range(3):
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(5, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "cemc/phasefield/cython/pytwo_phase_landau.pyx":40
 * 
 *         if direction < 0 or direction >= 3:
 *             raise ValueError("The direction has to be between 0 and 3!")             # <<<<<<<<<<<<<<
 *         return self.thisptr.partial_deriv_shape(conc, shp_vec, direction)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_The_direction_has_to_be_between); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":27
 *             self.thisptr3D = new chpf.CahnHilliardPhaseField[intParameter3](L, prefix, free_eng.thisptr, M, dt, alpha)
 *         else:
 *             raise ValueError("dim has to be one 1, 2 or 3")             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, dim, L, prefix, free_eng, M, dt, alpha):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_dim_has_to_be_one_1_2_or_3); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(7, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "cemc/phasefield/cython/pycahn_hilliard_phase_field.pyx":53
 *             self.thisptr3D.random_initialization(lower, upper)
 *         else:
 *             raise ValueError("Dimension has to be 1, 2, or 3")             # <<<<<<<<<<<<<<
 * 
 *     def from_file(self, fname):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Dimension_has_to_be_1_2_or_3); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(7, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "cemc/phasefield/cython/pypolynomial_term.pyx":21
 *     def evaluate(self, x):
 *         if len(x) > 10:
 *             raise ValueError("We only support up to 10 dimensional terms")             # <<<<<<<<<<<<<<
 *         cdef double c_array[10]
 *         for i in range(len(x)):
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_We_only_support_up_to_10_dimensi); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(8, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(16, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(16, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(16, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(16, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(16, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(16, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "../../.local/lib/python3.6/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(16, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":9
 * 
 * 
 * def pytest_functional_derivative(elastic, misfit, field):             # <<<<<<<<<<<<<<
 *     cdef vector[double] c_vec
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(5, __pyx_n_s_elastic, __pyx_n_s_misfit, __pyx_n_s_field, __pyx_n_s_c_vec, __pyx_n_s_i); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(15, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cemc_phasefield_cython_test_mult, __pyx_n_s_pytest_functional_derivative, 9, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(15, 9, __pyx_L1_error)

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":17
 *     return test_functional_derivative(elastic, misfit, c_vec)
 * 
 * def pytest_contract_tensors(t1, t2):             # <<<<<<<<<<<<<<
 *     return test_contract_tensors(t1, t2)
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_t1, __pyx_n_s_t2); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(15, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cemc_phasefield_cython_test_mult, __pyx_n_s_pytest_contract_tensors, 17, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(15, 17, __pyx_L1_error)

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":20
 *     return test_contract_tensors(t1, t2)
 * 
 * def pytest_B_tensor_element(dir, gf, t1, t2):             # <<<<<<<<<<<<<<
 *     cdef vector[double] v
 *     for i in range(3):
 */
  __pyx_tuple__50 = PyTuple_Pack(6, __pyx_n_s_dir, __pyx_n_s_gf, __pyx_n_s_t1, __pyx_n_s_t2, __pyx_n_s_v, __pyx_n_s_i); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(15, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cemc_phasefield_cython_test_mult, __pyx_n_s_pytest_B_tensor_element, 20, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(15, 20, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(17, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(17, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyRegressionKernel) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyRegressionKernel.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyRegressionKernel.tp_dictoffset && __pyx_type_14phasefield_cxx_PyRegressionKernel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyRegressionKernel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyRegressionKernel, (PyObject *)&__pyx_type_14phasefield_cxx_PyRegressionKernel) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyRegressionKernel) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyRegressionKernel = &__pyx_type_14phasefield_cxx_PyRegressionKernel;
  __pyx_type_14phasefield_cxx_PyQuadraticKernel.tp_base = __pyx_ptype_14phasefield_cxx_PyRegressionKernel;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyQuadraticKernel) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyQuadraticKernel.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyQuadraticKernel.tp_dictoffset && __pyx_type_14phasefield_cxx_PyQuadraticKernel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyQuadraticKernel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyQuadraticKernel, (PyObject *)&__pyx_type_14phasefield_cxx_PyQuadraticKernel) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyQuadraticKernel) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyQuadraticKernel = &__pyx_type_14phasefield_cxx_PyQuadraticKernel;
  __pyx_type_14phasefield_cxx_PyGaussianKernel.tp_base = __pyx_ptype_14phasefield_cxx_PyRegressionKernel;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyGaussianKernel) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyGaussianKernel.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyGaussianKernel.tp_dictoffset && __pyx_type_14phasefield_cxx_PyGaussianKernel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyGaussianKernel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyGaussianKernel, (PyObject *)&__pyx_type_14phasefield_cxx_PyGaussianKernel) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyGaussianKernel) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyGaussianKernel = &__pyx_type_14phasefield_cxx_PyGaussianKernel;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyKernelRegressor) < 0) __PYX_ERR(2, 8, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyKernelRegressor.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyKernelRegressor.tp_dictoffset && __pyx_type_14phasefield_cxx_PyKernelRegressor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyKernelRegressor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyKernelRegressor, (PyObject *)&__pyx_type_14phasefield_cxx_PyKernelRegressor) < 0) __PYX_ERR(2, 8, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyKernelRegressor) < 0) __PYX_ERR(2, 8, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyKernelRegressor = &__pyx_type_14phasefield_cxx_PyKernelRegressor;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyMat4D) < 0) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyMat4D.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyMat4D.tp_dictoffset && __pyx_type_14phasefield_cxx_PyMat4D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyMat4D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyMat4D, (PyObject *)&__pyx_type_14phasefield_cxx_PyMat4D) < 0) __PYX_ERR(4, 4, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyMat4D) < 0) __PYX_ERR(4, 4, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyMat4D = &__pyx_type_14phasefield_cxx_PyMat4D;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyKhachaturyan) < 0) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyKhachaturyan.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyKhachaturyan.tp_dictoffset && __pyx_type_14phasefield_cxx_PyKhachaturyan.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyKhachaturyan.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyKhachaturyan, (PyObject *)&__pyx_type_14phasefield_cxx_PyKhachaturyan) < 0) __PYX_ERR(5, 7, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyKhachaturyan) < 0) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyKhachaturyan = &__pyx_type_14phasefield_cxx_PyKhachaturyan;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyTwoPhaseLandau) < 0) __PYX_ERR(3, 7, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyTwoPhaseLandau.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyTwoPhaseLandau.tp_dictoffset && __pyx_type_14phasefield_cxx_PyTwoPhaseLandau.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyTwoPhaseLandau.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyTwoPhaseLandau, (PyObject *)&__pyx_type_14phasefield_cxx_PyTwoPhaseLandau) < 0) __PYX_ERR(3, 7, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyTwoPhaseLandau) < 0) __PYX_ERR(3, 7, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyTwoPhaseLandau = &__pyx_type_14phasefield_cxx_PyTwoPhaseLandau;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyCahnHilliard) < 0) __PYX_ERR(6, 6, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyCahnHilliard.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyCahnHilliard.tp_dictoffset && __pyx_type_14phasefield_cxx_PyCahnHilliard.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyCahnHilliard.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyCahnHilliard, (PyObject *)&__pyx_type_14phasefield_cxx_PyCahnHilliard) < 0) __PYX_ERR(6, 6, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyCahnHilliard) < 0) __PYX_ERR(6, 6, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyCahnHilliard = &__pyx_type_14phasefield_cxx_PyCahnHilliard;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField) < 0) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField.tp_dictoffset && __pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyCahnHilliardPhaseField, (PyObject *)&__pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField) < 0) __PYX_ERR(7, 13, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField) < 0) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyCahnHilliardPhaseField = &__pyx_type_14phasefield_cxx_PyCahnHilliardPhaseField;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyPolynomialTerm) < 0) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyPolynomialTerm.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyPolynomialTerm.tp_dictoffset && __pyx_type_14phasefield_cxx_PyPolynomialTerm.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyPolynomialTerm.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyPolynomialTerm, (PyObject *)&__pyx_type_14phasefield_cxx_PyPolynomialTerm) < 0) __PYX_ERR(8, 7, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyPolynomialTerm) < 0) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyPolynomialTerm = &__pyx_type_14phasefield_cxx_PyPolynomialTerm;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyPolynomial) < 0) __PYX_ERR(9, 6, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyPolynomial.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyPolynomial.tp_dictoffset && __pyx_type_14phasefield_cxx_PyPolynomial.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyPolynomial.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyPolynomial, (PyObject *)&__pyx_type_14phasefield_cxx_PyPolynomial) < 0) __PYX_ERR(9, 6, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyPolynomial) < 0) __PYX_ERR(9, 6, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyPolynomial = &__pyx_type_14phasefield_cxx_PyPolynomial;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyCHGL) < 0) __PYX_ERR(10, 13, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyCHGL.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyCHGL.tp_dictoffset && __pyx_type_14phasefield_cxx_PyCHGL.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyCHGL.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyCHGL, (PyObject *)&__pyx_type_14phasefield_cxx_PyCHGL) < 0) __PYX_ERR(10, 13, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyCHGL) < 0) __PYX_ERR(10, 13, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyCHGL = &__pyx_type_14phasefield_cxx_PyCHGL;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyCHGLRealSpace) < 0) __PYX_ERR(11, 13, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyCHGLRealSpace.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyCHGLRealSpace.tp_dictoffset && __pyx_type_14phasefield_cxx_PyCHGLRealSpace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyCHGLRealSpace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyCHGLRealSpace, (PyObject *)&__pyx_type_14phasefield_cxx_PyCHGLRealSpace) < 0) __PYX_ERR(11, 13, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyCHGLRealSpace) < 0) __PYX_ERR(11, 13, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyCHGLRealSpace = &__pyx_type_14phasefield_cxx_PyCHGLRealSpace;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PySparseMatrix) < 0) __PYX_ERR(12, 4, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PySparseMatrix.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PySparseMatrix.tp_dictoffset && __pyx_type_14phasefield_cxx_PySparseMatrix.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PySparseMatrix.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PySparseMatrix, (PyObject *)&__pyx_type_14phasefield_cxx_PySparseMatrix) < 0) __PYX_ERR(12, 4, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PySparseMatrix) < 0) __PYX_ERR(12, 4, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PySparseMatrix = &__pyx_type_14phasefield_cxx_PySparseMatrix;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyConjugateGradient) < 0) __PYX_ERR(13, 5, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyConjugateGradient.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyConjugateGradient.tp_dictoffset && __pyx_type_14phasefield_cxx_PyConjugateGradient.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyConjugateGradient.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyConjugateGradient, (PyObject *)&__pyx_type_14phasefield_cxx_PyConjugateGradient) < 0) __PYX_ERR(13, 5, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyConjugateGradient) < 0) __PYX_ERR(13, 5, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyConjugateGradient = &__pyx_type_14phasefield_cxx_PyConjugateGradient;
  if (PyType_Ready(&__pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger) < 0) __PYX_ERR(14, 5, __pyx_L1_error)
  __pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger.tp_dictoffset && __pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyAdaptiveTimeStepLogger, (PyObject *)&__pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger) < 0) __PYX_ERR(14, 5, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger) < 0) __PYX_ERR(14, 5, __pyx_L1_error)
  __pyx_ptype_14phasefield_cxx_PyAdaptiveTimeStepLogger = &__pyx_type_14phasefield_cxx_PyAdaptiveTimeStepLogger;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(18, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(18, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(16, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(16, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(16, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(16, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(16, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initphasefield_cxx(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initphasefield_cxx(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_phasefield_cxx(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_phasefield_cxx(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_phasefield_cxx(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'phasefield_cxx' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_phasefield_cxx(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(17, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(17, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("phasefield_cxx", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(17, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(17, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(17, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(17, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_phasefield_cxx) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(17, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "phasefield_cxx")) {
      if (unlikely(PyDict_SetItemString(modules, "phasefield_cxx", __pyx_m) < 0)) __PYX_ERR(17, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  #endif

  /* "phasefield_cxx.pyx":8
 * 
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * include "pyquadtratic_kernel.pyx"
 */
  __pyx_t_1 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(17, 8, __pyx_L1_error)

  /* "cemc/phasefield/cython/pykernel_regressor.pyx":6
 * from cython.operator cimport dereference
 * from libcpp.vector cimport vector
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cdef class PyKernelRegressor:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/khachaturyan.pyx":5
 * from cemc.phasefield.cython.khachaturyan cimport Khachaturyan
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cdef class PyKhachaturyan:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":9
 * 
 * 
 * def pytest_functional_derivative(elastic, misfit, field):             # <<<<<<<<<<<<<<
 *     cdef vector[double] c_vec
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14phasefield_cxx_1pytest_functional_derivative, NULL, __pyx_n_s_phasefield_cxx); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pytest_functional_derivative, __pyx_t_2) < 0) __PYX_ERR(15, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":17
 *     return test_functional_derivative(elastic, misfit, c_vec)
 * 
 * def pytest_contract_tensors(t1, t2):             # <<<<<<<<<<<<<<
 *     return test_contract_tensors(t1, t2)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14phasefield_cxx_3pytest_contract_tensors, NULL, __pyx_n_s_phasefield_cxx); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pytest_contract_tensors, __pyx_t_2) < 0) __PYX_ERR(15, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cemc/phasefield/cython/test_multidirectional_khachaturyan.pyx":20
 *     return test_contract_tensors(t1, t2)
 * 
 * def pytest_B_tensor_element(dir, gf, t1, t2):             # <<<<<<<<<<<<<<
 *     cdef vector[double] v
 *     for i in range(3):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_14phasefield_cxx_5pytest_B_tensor_element, NULL, __pyx_n_s_phasefield_cxx); if (unlikely(!__pyx_t_2)) __PYX_ERR(15, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pytest_B_tensor_element, __pyx_t_2) < 0) __PYX_ERR(15, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "phasefield_cxx.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: c_string_type=str, c_string_encoding=ascii
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(17, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(17, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init phasefield_cxx", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init phasefield_cxx");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
